/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * A RestFull API for Decidim, to be able to CRUD resources from Decidim.  ## Authentication [Get a token](https://octree-gva.github.io/decidim-rest-full/category/authentication) from our `/oauth/token` routes,  following OAuth specs on Credential Flows or Resource Owner Password Credentials Flow.  ### Permissions A permission system is attached to the created OAuth application, that is designed in two levels:   - **scope**: a broad permission to access a collection of endpoints - **abilities**: a fine grained permission system that allow actions.   The scopes and abilities are manageable in your System Admin Panel.  ### Multi-tenant Decidim is multi-tenant, and this API supports it. - The **`system` scope** endpoints are available in any tenant - The tenant `host` attribute will be used to guess which tenant you are requesting.    For example, given a tenant `example.org` and `foobar.org`, the endpoint   * `example.org/oauth/token` will ask a token for the example.org organization   * `foobar.org/oauth/token` for foobar.org.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface ApiError
 */
export interface ApiError {
  /**
   *
   * @type {number}
   * @memberof ApiError
   */
  error_code: number;
  /**
   *
   * @type {string}
   * @memberof ApiError
   */
  message: string;
  /**
   *
   * @type {string}
   * @memberof ApiError
   */
  details?: string;
}
/**
 *
 * @export
 * @interface ClientCredential
 */
export interface ClientCredential {
  /**
   * Client Credential Flow, for **machine-to-machine**
   * @type {string}
   * @memberof ClientCredential
   */
  grant_type: ClientCredentialGrantTypeEnum;
  /**
   * OAuth application Client Id
   * @type {string}
   * @memberof ClientCredential
   */
  client_id: string;
  /**
   * OAuth application Client Secret
   * @type {string}
   * @memberof ClientCredential
   */
  client_secret: string;
  /**
   * Requested scopes
   * @type {string}
   * @memberof ClientCredential
   */
  scope: ClientCredentialScopeEnum;
}

export const ClientCredentialGrantTypeEnum = {
  ClientCredentials: "client_credentials",
} as const;

export type ClientCredentialGrantTypeEnum =
  (typeof ClientCredentialGrantTypeEnum)[keyof typeof ClientCredentialGrantTypeEnum];
export const ClientCredentialScopeEnum = {
  Public: "public",
  Spaces: "spaces",
  System: "system",
  Proposals: "proposals",
  Meetings: "meetings",
  Debates: "debates",
  Pages: "pages",
} as const;

export type ClientCredentialScopeEnum =
  (typeof ClientCredentialScopeEnum)[keyof typeof ClientCredentialScopeEnum];

/**
 *
 * @export
 * @interface Component
 */
export interface Component {
  /**
   * Component Id
   * @type {string}
   * @memberof Component
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Component
   */
  type: ComponentTypeEnum;
  /**
   *
   * @type {ComponentAttributes}
   * @memberof Component
   */
  attributes?: ComponentAttributes;
}

export const ComponentTypeEnum = {
  Component: "component",
} as const;

export type ComponentTypeEnum =
  (typeof ComponentTypeEnum)[keyof typeof ComponentTypeEnum];

/**
 *
 * @export
 * @interface ComponentAttributes
 */
export interface ComponentAttributes {
  /**
   * Component title
   * @type {{ [key: string]: string; }}
   * @memberof ComponentAttributes
   */
  title: { [key: string]: string };
  /**
   * Component title
   * @type {{ [key: string]: string; }}
   * @memberof ComponentAttributes
   */
  global_annoucement?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof ComponentAttributes
   */
  manifest_name: ComponentAttributesManifestNameEnum;
}

export const ComponentAttributesManifestNameEnum = {
  Dummy: "dummy",
  Pages: "pages",
  Proposals: "proposals",
  Meetings: "meetings",
  Budgets: "budgets",
  Surveys: "surveys",
  Accountability: "accountability",
  Debates: "debates",
  Sortitions: "sortitions",
  Blogs: "blogs",
} as const;

export type ComponentAttributesManifestNameEnum =
  (typeof ComponentAttributesManifestNameEnum)[keyof typeof ComponentAttributesManifestNameEnum];

/**
 *
 * @export
 * @interface ComponentResponse
 */
export interface ComponentResponse {
  /**
   *
   * @type {Array<Component>}
   * @memberof ComponentResponse
   */
  data: Array<Component>;
}
/**
 *
 * @export
 * @interface Impersonation
 */
export interface Impersonation {
  /**
   * Resource Owner Password Credentials (ROPC) Flow, for **user impersonation**
   * @type {string}
   * @memberof Impersonation
   */
  grant_type: ImpersonationGrantTypeEnum;
  /**
   * Type of ROPC
   * @type {string}
   * @memberof Impersonation
   */
  auth_type: ImpersonationAuthTypeEnum;
  /**
   * User nickname
   * @type {string}
   * @memberof Impersonation
   */
  username: string;
  /**
   * OAuth application Client Id
   * @type {string}
   * @memberof Impersonation
   */
  client_id: string;
  /**
   * OAuth application Client Secret
   * @type {string}
   * @memberof Impersonation
   */
  client_secret: string;
  /**
   * Request scopes
   * @type {string}
   * @memberof Impersonation
   */
  scope: ImpersonationScopeEnum;
}

export const ImpersonationGrantTypeEnum = {
  Password: "password",
} as const;

export type ImpersonationGrantTypeEnum =
  (typeof ImpersonationGrantTypeEnum)[keyof typeof ImpersonationGrantTypeEnum];
export const ImpersonationAuthTypeEnum = {
  Impersonate: "impersonate",
} as const;

export type ImpersonationAuthTypeEnum =
  (typeof ImpersonationAuthTypeEnum)[keyof typeof ImpersonationAuthTypeEnum];
export const ImpersonationScopeEnum = {
  Public: "public",
  Spaces: "spaces",
  Proposals: "proposals",
  Meetings: "meetings",
  Debates: "debates",
  Pages: "pages",
} as const;

export type ImpersonationScopeEnum =
  (typeof ImpersonationScopeEnum)[keyof typeof ImpersonationScopeEnum];

/**
 *
 * @export
 * @interface Login
 */
export interface Login {
  /**
   * Resource Owner Password Credentials (ROPC) Flow, for **user login**
   * @type {string}
   * @memberof Login
   */
  grant_type: LoginGrantTypeEnum;
  /**
   * Type of ROPC
   * @type {string}
   * @memberof Login
   */
  auth_type: LoginAuthTypeEnum;
  /**
   * User nickname
   * @type {string}
   * @memberof Login
   */
  username: string;
  /**
   * User password
   * @type {string}
   * @memberof Login
   */
  password: string;
  /**
   * OAuth application Client Id
   * @type {string}
   * @memberof Login
   */
  client_id: string;
  /**
   * OAuth application Client Secret
   * @type {string}
   * @memberof Login
   */
  client_secret: string;
  /**
   * Request scopes
   * @type {string}
   * @memberof Login
   */
  scope: LoginScopeEnum;
}

export const LoginGrantTypeEnum = {
  Password: "password",
} as const;

export type LoginGrantTypeEnum =
  (typeof LoginGrantTypeEnum)[keyof typeof LoginGrantTypeEnum];
export const LoginAuthTypeEnum = {
  Login: "login",
} as const;

export type LoginAuthTypeEnum =
  (typeof LoginAuthTypeEnum)[keyof typeof LoginAuthTypeEnum];
export const LoginScopeEnum = {
  Public: "public",
  Spaces: "spaces",
  Proposals: "proposals",
  Meetings: "meetings",
  Debates: "debates",
  Pages: "pages",
} as const;

export type LoginScopeEnum =
  (typeof LoginScopeEnum)[keyof typeof LoginScopeEnum];

/**
 * @type OauthGrantParam
 * @export
 */
export type OauthGrantParam = ClientCredential | Impersonation | Login;

/**
 *
 * @export
 * @interface Organization
 */
export interface Organization {
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  type: OrganizationTypeEnum;
  /**
   *
   * @type {OrganizationAttributes}
   * @memberof Organization
   */
  attributes?: OrganizationAttributes;
}

export const OrganizationTypeEnum = {
  Organization: "organization",
} as const;

export type OrganizationTypeEnum =
  (typeof OrganizationTypeEnum)[keyof typeof OrganizationTypeEnum];

/**
 *
 * @export
 * @interface OrganizationAttributes
 */
export interface OrganizationAttributes {
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof OrganizationAttributes
   */
  name?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof OrganizationAttributes
   */
  host?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof OrganizationAttributes
   */
  secondaryHosts?: Array<string>;
  /**
   *
   * @type {OrganizationAttributesMeta}
   * @memberof OrganizationAttributes
   */
  meta?: OrganizationAttributesMeta;
  /**
   *
   * @type {string}
   * @memberof OrganizationAttributes
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationAttributes
   */
  updated_at: string;
}
/**
 *
 * @export
 * @interface OrganizationAttributesMeta
 */
export interface OrganizationAttributesMeta {
  /**
   *
   * @type {Array<string>}
   * @memberof OrganizationAttributesMeta
   */
  populated?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof OrganizationAttributesMeta
   */
  locales?: Array<string>;
}
/**
 *
 * @export
 * @interface OrganizationsResponse
 */
export interface OrganizationsResponse {
  /**
   *
   * @type {Array<Organization>}
   * @memberof OrganizationsResponse
   */
  data: Array<Organization>;
}
/**
 * @type PasswordGrantParam
 * @export
 */
export type PasswordGrantParam = Impersonation | Login;

/**
 *
 * @export
 * @interface Space
 */
export interface Space {
  /**
   * Space Id
   * @type {string}
   * @memberof Space
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Space
   */
  type: SpaceTypeEnum;
  /**
   *
   * @type {SpaceAttributes}
   * @memberof Space
   */
  attributes?: SpaceAttributes;
}

export const SpaceTypeEnum = {
  Space: "space",
} as const;

export type SpaceTypeEnum = (typeof SpaceTypeEnum)[keyof typeof SpaceTypeEnum];

/**
 *
 * @export
 * @interface SpaceAttributes
 */
export interface SpaceAttributes {
  /**
   * Space title
   * @type {{ [key: string]: string; }}
   * @memberof SpaceAttributes
   */
  title: { [key: string]: string };
  /**
   * Space subtitle
   * @type {{ [key: string]: string; }}
   * @memberof SpaceAttributes
   */
  subtitle?: { [key: string]: string };
  /**
   * Space short_description
   * @type {{ [key: string]: string; }}
   * @memberof SpaceAttributes
   */
  short_description?: { [key: string]: string };
  /**
   * Space description
   * @type {{ [key: string]: string; }}
   * @memberof SpaceAttributes
   */
  description?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof SpaceAttributes
   */
  manifest_name: SpaceAttributesManifestNameEnum;
  /**
   * Space visibility
   * @type {string}
   * @memberof SpaceAttributes
   */
  visibility: SpaceAttributesVisibilityEnum;
  /**
   *
   * @type {Array<SpaceAttributesComponentsInner>}
   * @memberof SpaceAttributes
   */
  components: Array<SpaceAttributesComponentsInner>;
}

export const SpaceAttributesManifestNameEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;

export type SpaceAttributesManifestNameEnum =
  (typeof SpaceAttributesManifestNameEnum)[keyof typeof SpaceAttributesManifestNameEnum];
export const SpaceAttributesVisibilityEnum = {
  Public: "public",
  Transparent: "transparent",
  Private: "private",
} as const;

export type SpaceAttributesVisibilityEnum =
  (typeof SpaceAttributesVisibilityEnum)[keyof typeof SpaceAttributesVisibilityEnum];

/**
 *
 * @export
 * @interface SpaceAttributesComponentsInner
 */
export interface SpaceAttributesComponentsInner {
  /**
   * Component Id
   * @type {number}
   * @memberof SpaceAttributesComponentsInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof SpaceAttributesComponentsInner
   */
  manifest_name: SpaceAttributesComponentsInnerManifestNameEnum;
}

export const SpaceAttributesComponentsInnerManifestNameEnum = {
  Dummy: "dummy",
  Pages: "pages",
  Proposals: "proposals",
  Meetings: "meetings",
  Budgets: "budgets",
  Surveys: "surveys",
  Accountability: "accountability",
  Debates: "debates",
  Sortitions: "sortitions",
  Blogs: "blogs",
} as const;

export type SpaceAttributesComponentsInnerManifestNameEnum =
  (typeof SpaceAttributesComponentsInnerManifestNameEnum)[keyof typeof SpaceAttributesComponentsInnerManifestNameEnum];

/**
 *
 * @export
 * @interface SpaceResponse
 */
export interface SpaceResponse {
  /**
   *
   * @type {Array<Space>}
   * @memberof SpaceResponse
   */
  data: Array<Space>;
}

/**
 * OAuthApi - axios parameter creator
 * @export
 */
export const OAuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Request a OAuth token
     * @param {OauthGrantParam} oauthGrantParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthTokenPost: async (
      oauthGrantParam: OauthGrantParam,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'oauthGrantParam' is not null or undefined
      assertParamExists("oauthTokenPost", "oauthGrantParam", oauthGrantParam);
      const localVarPath = `/oauth/token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oauthGrantParam,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OAuthApi - functional programming interface
 * @export
 */
export const OAuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OAuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Request a OAuth token
     * @param {OauthGrantParam} oauthGrantParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oauthTokenPost(
      oauthGrantParam: OauthGrantParam,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.oauthTokenPost(
        oauthGrantParam,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OAuthApi.oauthTokenPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OAuthApi - factory interface
 * @export
 */
export const OAuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OAuthApiFp(configuration);
  return {
    /**
     *
     * @summary Request a OAuth token
     * @param {OauthGrantParam} oauthGrantParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthTokenPost(
      oauthGrantParam: OauthGrantParam,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .oauthTokenPost(oauthGrantParam, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OAuthApi - object-oriented interface
 * @export
 * @class OAuthApi
 * @extends {BaseAPI}
 */
export class OAuthApi extends BaseAPI {
  /**
   *
   * @summary Request a OAuth token
   * @param {OauthGrantParam} oauthGrantParam
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuthApi
   */
  public oauthTokenPost(
    oauthGrantParam: OauthGrantParam,
    options?: RawAxiosRequestConfig,
  ) {
    return OAuthApiFp(this.configuration)
      .oauthTokenPost(oauthGrantParam, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary List Components
     * @param {Array<ApiRestFullV00PublicComponentsGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameStart]
     * @param {string} [filterManifestNameNotStart]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {string} [filterManifestNameMatches]
     * @param {string} [filterManifestNameDoesNotMatch]
     * @param {string} [filterManifestNameMatchesAny]
     * @param {string} [filterManifestNameMatchesAll]
     * @param {string} [filterManifestNameDoesNotMatchAny]
     * @param {string} [filterManifestNameDoesNotMatchAll]
     * @param {string} [filterManifestNameLt]
     * @param {string} [filterManifestNameLteq]
     * @param {string} [filterManifestNameGt]
     * @param {string} [filterManifestNameGteq]
     * @param {string} [filterManifestNamePresent]
     * @param {string} [filterManifestNameBlank]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00PublicComponentsGet: async (
      locales?: Array<ApiRestFullV00PublicComponentsGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>,
      filterManifestNameStart?: string,
      filterManifestNameNotStart?: string,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterManifestNameMatches?: string,
      filterManifestNameDoesNotMatch?: string,
      filterManifestNameMatchesAny?: string,
      filterManifestNameMatchesAll?: string,
      filterManifestNameDoesNotMatchAny?: string,
      filterManifestNameDoesNotMatchAll?: string,
      filterManifestNameLt?: string,
      filterManifestNameLteq?: string,
      filterManifestNameGt?: string,
      filterManifestNameGteq?: string,
      filterManifestNamePresent?: string,
      filterManifestNameBlank?: string,
      page?: number,
      perPage?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rest_full/v0.0/public/components`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication resourceOwnerFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      if (filterManifestNameNotIn) {
        localVarQueryParameter["filter[manifest_name_not_in][]"] =
          filterManifestNameNotIn;
      }

      if (filterManifestNameIn) {
        localVarQueryParameter["filter[manifest_name_in][]"] =
          filterManifestNameIn;
      }

      if (filterManifestNameStart !== undefined) {
        localVarQueryParameter["filter[manifest_name_start]"] =
          filterManifestNameStart;
      }

      if (filterManifestNameNotStart !== undefined) {
        localVarQueryParameter["filter[manifest_name_not_start]"] =
          filterManifestNameNotStart;
      }

      if (filterManifestNameEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_eq]"] =
          filterManifestNameEq;
      }

      if (filterManifestNameNotEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_not_eq]"] =
          filterManifestNameNotEq;
      }

      if (filterManifestNameMatches !== undefined) {
        localVarQueryParameter["filter[manifest_name_matches]"] =
          filterManifestNameMatches;
      }

      if (filterManifestNameDoesNotMatch !== undefined) {
        localVarQueryParameter["filter[manifest_name_does_not_match]"] =
          filterManifestNameDoesNotMatch;
      }

      if (filterManifestNameMatchesAny !== undefined) {
        localVarQueryParameter["filter[manifest_name_matches_any]"] =
          filterManifestNameMatchesAny;
      }

      if (filterManifestNameMatchesAll !== undefined) {
        localVarQueryParameter["filter[manifest_name_matches_all]"] =
          filterManifestNameMatchesAll;
      }

      if (filterManifestNameDoesNotMatchAny !== undefined) {
        localVarQueryParameter["filter[manifest_name_does_not_match_any]"] =
          filterManifestNameDoesNotMatchAny;
      }

      if (filterManifestNameDoesNotMatchAll !== undefined) {
        localVarQueryParameter["filter[manifest_name_does_not_match_all]"] =
          filterManifestNameDoesNotMatchAll;
      }

      if (filterManifestNameLt !== undefined) {
        localVarQueryParameter["filter[manifest_name_lt]"] =
          filterManifestNameLt;
      }

      if (filterManifestNameLteq !== undefined) {
        localVarQueryParameter["filter[manifest_name_lteq]"] =
          filterManifestNameLteq;
      }

      if (filterManifestNameGt !== undefined) {
        localVarQueryParameter["filter[manifest_name_gt]"] =
          filterManifestNameGt;
      }

      if (filterManifestNameGteq !== undefined) {
        localVarQueryParameter["filter[manifest_name_gteq]"] =
          filterManifestNameGteq;
      }

      if (filterManifestNamePresent !== undefined) {
        localVarQueryParameter["filter[manifest_name_present]"] =
          filterManifestNamePresent;
      }

      if (filterManifestNameBlank !== undefined) {
        localVarQueryParameter["filter[manifest_name_blank]"] =
          filterManifestNameBlank;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List Participatory Spaces
     * @param {Array<ApiRestFullV00PublicSpacesGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameStart]
     * @param {string} [filterManifestNameNotStart]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {string} [filterManifestNameMatches]
     * @param {string} [filterManifestNameDoesNotMatch]
     * @param {string} [filterManifestNameMatchesAny]
     * @param {string} [filterManifestNameMatchesAll]
     * @param {string} [filterManifestNameDoesNotMatchAny]
     * @param {string} [filterManifestNameDoesNotMatchAll]
     * @param {string} [filterManifestNameLt]
     * @param {string} [filterManifestNameLteq]
     * @param {string} [filterManifestNameGt]
     * @param {string} [filterManifestNameGteq]
     * @param {string} [filterManifestNamePresent]
     * @param {string} [filterManifestNameBlank]
     * @param {Array<string>} [filterTitleNotIn]
     * @param {Array<string>} [filterTitleIn]
     * @param {string} [filterTitleStart]
     * @param {string} [filterTitleNotStart]
     * @param {string} [filterTitleEq]
     * @param {string} [filterTitleNotEq]
     * @param {string} [filterTitleMatches]
     * @param {string} [filterTitleDoesNotMatch]
     * @param {string} [filterTitleMatchesAny]
     * @param {string} [filterTitleMatchesAll]
     * @param {string} [filterTitleDoesNotMatchAny]
     * @param {string} [filterTitleDoesNotMatchAll]
     * @param {string} [filterTitleLt]
     * @param {string} [filterTitleLteq]
     * @param {string} [filterTitleGt]
     * @param {string} [filterTitleGteq]
     * @param {string} [filterTitlePresent]
     * @param {string} [filterTitleBlank]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00PublicSpacesGet: async (
      locales?: Array<ApiRestFullV00PublicSpacesGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>,
      filterManifestNameStart?: string,
      filterManifestNameNotStart?: string,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterManifestNameMatches?: string,
      filterManifestNameDoesNotMatch?: string,
      filterManifestNameMatchesAny?: string,
      filterManifestNameMatchesAll?: string,
      filterManifestNameDoesNotMatchAny?: string,
      filterManifestNameDoesNotMatchAll?: string,
      filterManifestNameLt?: string,
      filterManifestNameLteq?: string,
      filterManifestNameGt?: string,
      filterManifestNameGteq?: string,
      filterManifestNamePresent?: string,
      filterManifestNameBlank?: string,
      filterTitleNotIn?: Array<string>,
      filterTitleIn?: Array<string>,
      filterTitleStart?: string,
      filterTitleNotStart?: string,
      filterTitleEq?: string,
      filterTitleNotEq?: string,
      filterTitleMatches?: string,
      filterTitleDoesNotMatch?: string,
      filterTitleMatchesAny?: string,
      filterTitleMatchesAll?: string,
      filterTitleDoesNotMatchAny?: string,
      filterTitleDoesNotMatchAll?: string,
      filterTitleLt?: string,
      filterTitleLteq?: string,
      filterTitleGt?: string,
      filterTitleGteq?: string,
      filterTitlePresent?: string,
      filterTitleBlank?: string,
      page?: number,
      perPage?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rest_full/v0.0/public/spaces`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication resourceOwnerFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      if (filterManifestNameNotIn) {
        localVarQueryParameter["filter[manifest_name_not_in][]"] =
          filterManifestNameNotIn;
      }

      if (filterManifestNameIn) {
        localVarQueryParameter["filter[manifest_name_in][]"] =
          filterManifestNameIn;
      }

      if (filterManifestNameStart !== undefined) {
        localVarQueryParameter["filter[manifest_name_start]"] =
          filterManifestNameStart;
      }

      if (filterManifestNameNotStart !== undefined) {
        localVarQueryParameter["filter[manifest_name_not_start]"] =
          filterManifestNameNotStart;
      }

      if (filterManifestNameEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_eq]"] =
          filterManifestNameEq;
      }

      if (filterManifestNameNotEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_not_eq]"] =
          filterManifestNameNotEq;
      }

      if (filterManifestNameMatches !== undefined) {
        localVarQueryParameter["filter[manifest_name_matches]"] =
          filterManifestNameMatches;
      }

      if (filterManifestNameDoesNotMatch !== undefined) {
        localVarQueryParameter["filter[manifest_name_does_not_match]"] =
          filterManifestNameDoesNotMatch;
      }

      if (filterManifestNameMatchesAny !== undefined) {
        localVarQueryParameter["filter[manifest_name_matches_any]"] =
          filterManifestNameMatchesAny;
      }

      if (filterManifestNameMatchesAll !== undefined) {
        localVarQueryParameter["filter[manifest_name_matches_all]"] =
          filterManifestNameMatchesAll;
      }

      if (filterManifestNameDoesNotMatchAny !== undefined) {
        localVarQueryParameter["filter[manifest_name_does_not_match_any]"] =
          filterManifestNameDoesNotMatchAny;
      }

      if (filterManifestNameDoesNotMatchAll !== undefined) {
        localVarQueryParameter["filter[manifest_name_does_not_match_all]"] =
          filterManifestNameDoesNotMatchAll;
      }

      if (filterManifestNameLt !== undefined) {
        localVarQueryParameter["filter[manifest_name_lt]"] =
          filterManifestNameLt;
      }

      if (filterManifestNameLteq !== undefined) {
        localVarQueryParameter["filter[manifest_name_lteq]"] =
          filterManifestNameLteq;
      }

      if (filterManifestNameGt !== undefined) {
        localVarQueryParameter["filter[manifest_name_gt]"] =
          filterManifestNameGt;
      }

      if (filterManifestNameGteq !== undefined) {
        localVarQueryParameter["filter[manifest_name_gteq]"] =
          filterManifestNameGteq;
      }

      if (filterManifestNamePresent !== undefined) {
        localVarQueryParameter["filter[manifest_name_present]"] =
          filterManifestNamePresent;
      }

      if (filterManifestNameBlank !== undefined) {
        localVarQueryParameter["filter[manifest_name_blank]"] =
          filterManifestNameBlank;
      }

      if (filterTitleNotIn) {
        localVarQueryParameter["filter[title_not_in][]"] = filterTitleNotIn;
      }

      if (filterTitleIn) {
        localVarQueryParameter["filter[title_in][]"] = filterTitleIn;
      }

      if (filterTitleStart !== undefined) {
        localVarQueryParameter["filter[title_start]"] = filterTitleStart;
      }

      if (filterTitleNotStart !== undefined) {
        localVarQueryParameter["filter[title_not_start]"] = filterTitleNotStart;
      }

      if (filterTitleEq !== undefined) {
        localVarQueryParameter["filter[title_eq]"] = filterTitleEq;
      }

      if (filterTitleNotEq !== undefined) {
        localVarQueryParameter["filter[title_not_eq]"] = filterTitleNotEq;
      }

      if (filterTitleMatches !== undefined) {
        localVarQueryParameter["filter[title_matches]"] = filterTitleMatches;
      }

      if (filterTitleDoesNotMatch !== undefined) {
        localVarQueryParameter["filter[title_does_not_match]"] =
          filterTitleDoesNotMatch;
      }

      if (filterTitleMatchesAny !== undefined) {
        localVarQueryParameter["filter[title_matches_any]"] =
          filterTitleMatchesAny;
      }

      if (filterTitleMatchesAll !== undefined) {
        localVarQueryParameter["filter[title_matches_all]"] =
          filterTitleMatchesAll;
      }

      if (filterTitleDoesNotMatchAny !== undefined) {
        localVarQueryParameter["filter[title_does_not_match_any]"] =
          filterTitleDoesNotMatchAny;
      }

      if (filterTitleDoesNotMatchAll !== undefined) {
        localVarQueryParameter["filter[title_does_not_match_all]"] =
          filterTitleDoesNotMatchAll;
      }

      if (filterTitleLt !== undefined) {
        localVarQueryParameter["filter[title_lt]"] = filterTitleLt;
      }

      if (filterTitleLteq !== undefined) {
        localVarQueryParameter["filter[title_lteq]"] = filterTitleLteq;
      }

      if (filterTitleGt !== undefined) {
        localVarQueryParameter["filter[title_gt]"] = filterTitleGt;
      }

      if (filterTitleGteq !== undefined) {
        localVarQueryParameter["filter[title_gteq]"] = filterTitleGteq;
      }

      if (filterTitlePresent !== undefined) {
        localVarQueryParameter["filter[title_present]"] = filterTitlePresent;
      }

      if (filterTitleBlank !== undefined) {
        localVarQueryParameter["filter[title_blank]"] = filterTitleBlank;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary List Components
     * @param {Array<ApiRestFullV00PublicComponentsGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameStart]
     * @param {string} [filterManifestNameNotStart]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {string} [filterManifestNameMatches]
     * @param {string} [filterManifestNameDoesNotMatch]
     * @param {string} [filterManifestNameMatchesAny]
     * @param {string} [filterManifestNameMatchesAll]
     * @param {string} [filterManifestNameDoesNotMatchAny]
     * @param {string} [filterManifestNameDoesNotMatchAll]
     * @param {string} [filterManifestNameLt]
     * @param {string} [filterManifestNameLteq]
     * @param {string} [filterManifestNameGt]
     * @param {string} [filterManifestNameGteq]
     * @param {string} [filterManifestNamePresent]
     * @param {string} [filterManifestNameBlank]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiRestFullV00PublicComponentsGet(
      locales?: Array<ApiRestFullV00PublicComponentsGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>,
      filterManifestNameStart?: string,
      filterManifestNameNotStart?: string,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterManifestNameMatches?: string,
      filterManifestNameDoesNotMatch?: string,
      filterManifestNameMatchesAny?: string,
      filterManifestNameMatchesAll?: string,
      filterManifestNameDoesNotMatchAny?: string,
      filterManifestNameDoesNotMatchAll?: string,
      filterManifestNameLt?: string,
      filterManifestNameLteq?: string,
      filterManifestNameGt?: string,
      filterManifestNameGteq?: string,
      filterManifestNamePresent?: string,
      filterManifestNameBlank?: string,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ComponentResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiRestFullV00PublicComponentsGet(
          locales,
          filterManifestNameNotIn,
          filterManifestNameIn,
          filterManifestNameStart,
          filterManifestNameNotStart,
          filterManifestNameEq,
          filterManifestNameNotEq,
          filterManifestNameMatches,
          filterManifestNameDoesNotMatch,
          filterManifestNameMatchesAny,
          filterManifestNameMatchesAll,
          filterManifestNameDoesNotMatchAny,
          filterManifestNameDoesNotMatchAll,
          filterManifestNameLt,
          filterManifestNameLteq,
          filterManifestNameGt,
          filterManifestNameGteq,
          filterManifestNamePresent,
          filterManifestNameBlank,
          page,
          perPage,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PublicApi.apiRestFullV00PublicComponentsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary List Participatory Spaces
     * @param {Array<ApiRestFullV00PublicSpacesGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameStart]
     * @param {string} [filterManifestNameNotStart]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {string} [filterManifestNameMatches]
     * @param {string} [filterManifestNameDoesNotMatch]
     * @param {string} [filterManifestNameMatchesAny]
     * @param {string} [filterManifestNameMatchesAll]
     * @param {string} [filterManifestNameDoesNotMatchAny]
     * @param {string} [filterManifestNameDoesNotMatchAll]
     * @param {string} [filterManifestNameLt]
     * @param {string} [filterManifestNameLteq]
     * @param {string} [filterManifestNameGt]
     * @param {string} [filterManifestNameGteq]
     * @param {string} [filterManifestNamePresent]
     * @param {string} [filterManifestNameBlank]
     * @param {Array<string>} [filterTitleNotIn]
     * @param {Array<string>} [filterTitleIn]
     * @param {string} [filterTitleStart]
     * @param {string} [filterTitleNotStart]
     * @param {string} [filterTitleEq]
     * @param {string} [filterTitleNotEq]
     * @param {string} [filterTitleMatches]
     * @param {string} [filterTitleDoesNotMatch]
     * @param {string} [filterTitleMatchesAny]
     * @param {string} [filterTitleMatchesAll]
     * @param {string} [filterTitleDoesNotMatchAny]
     * @param {string} [filterTitleDoesNotMatchAll]
     * @param {string} [filterTitleLt]
     * @param {string} [filterTitleLteq]
     * @param {string} [filterTitleGt]
     * @param {string} [filterTitleGteq]
     * @param {string} [filterTitlePresent]
     * @param {string} [filterTitleBlank]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiRestFullV00PublicSpacesGet(
      locales?: Array<ApiRestFullV00PublicSpacesGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>,
      filterManifestNameStart?: string,
      filterManifestNameNotStart?: string,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterManifestNameMatches?: string,
      filterManifestNameDoesNotMatch?: string,
      filterManifestNameMatchesAny?: string,
      filterManifestNameMatchesAll?: string,
      filterManifestNameDoesNotMatchAny?: string,
      filterManifestNameDoesNotMatchAll?: string,
      filterManifestNameLt?: string,
      filterManifestNameLteq?: string,
      filterManifestNameGt?: string,
      filterManifestNameGteq?: string,
      filterManifestNamePresent?: string,
      filterManifestNameBlank?: string,
      filterTitleNotIn?: Array<string>,
      filterTitleIn?: Array<string>,
      filterTitleStart?: string,
      filterTitleNotStart?: string,
      filterTitleEq?: string,
      filterTitleNotEq?: string,
      filterTitleMatches?: string,
      filterTitleDoesNotMatch?: string,
      filterTitleMatchesAny?: string,
      filterTitleMatchesAll?: string,
      filterTitleDoesNotMatchAny?: string,
      filterTitleDoesNotMatchAll?: string,
      filterTitleLt?: string,
      filterTitleLteq?: string,
      filterTitleGt?: string,
      filterTitleGteq?: string,
      filterTitlePresent?: string,
      filterTitleBlank?: string,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpaceResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiRestFullV00PublicSpacesGet(
          locales,
          filterManifestNameNotIn,
          filterManifestNameIn,
          filterManifestNameStart,
          filterManifestNameNotStart,
          filterManifestNameEq,
          filterManifestNameNotEq,
          filterManifestNameMatches,
          filterManifestNameDoesNotMatch,
          filterManifestNameMatchesAny,
          filterManifestNameMatchesAll,
          filterManifestNameDoesNotMatchAny,
          filterManifestNameDoesNotMatchAll,
          filterManifestNameLt,
          filterManifestNameLteq,
          filterManifestNameGt,
          filterManifestNameGteq,
          filterManifestNamePresent,
          filterManifestNameBlank,
          filterTitleNotIn,
          filterTitleIn,
          filterTitleStart,
          filterTitleNotStart,
          filterTitleEq,
          filterTitleNotEq,
          filterTitleMatches,
          filterTitleDoesNotMatch,
          filterTitleMatchesAny,
          filterTitleMatchesAll,
          filterTitleDoesNotMatchAny,
          filterTitleDoesNotMatchAll,
          filterTitleLt,
          filterTitleLteq,
          filterTitleGt,
          filterTitleGteq,
          filterTitlePresent,
          filterTitleBlank,
          page,
          perPage,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PublicApi.apiRestFullV00PublicSpacesGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PublicApiFp(configuration);
  return {
    /**
     *
     * @summary List Components
     * @param {Array<ApiRestFullV00PublicComponentsGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameStart]
     * @param {string} [filterManifestNameNotStart]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {string} [filterManifestNameMatches]
     * @param {string} [filterManifestNameDoesNotMatch]
     * @param {string} [filterManifestNameMatchesAny]
     * @param {string} [filterManifestNameMatchesAll]
     * @param {string} [filterManifestNameDoesNotMatchAny]
     * @param {string} [filterManifestNameDoesNotMatchAll]
     * @param {string} [filterManifestNameLt]
     * @param {string} [filterManifestNameLteq]
     * @param {string} [filterManifestNameGt]
     * @param {string} [filterManifestNameGteq]
     * @param {string} [filterManifestNamePresent]
     * @param {string} [filterManifestNameBlank]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00PublicComponentsGet(
      locales?: Array<ApiRestFullV00PublicComponentsGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>,
      filterManifestNameStart?: string,
      filterManifestNameNotStart?: string,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterManifestNameMatches?: string,
      filterManifestNameDoesNotMatch?: string,
      filterManifestNameMatchesAny?: string,
      filterManifestNameMatchesAll?: string,
      filterManifestNameDoesNotMatchAny?: string,
      filterManifestNameDoesNotMatchAll?: string,
      filterManifestNameLt?: string,
      filterManifestNameLteq?: string,
      filterManifestNameGt?: string,
      filterManifestNameGteq?: string,
      filterManifestNamePresent?: string,
      filterManifestNameBlank?: string,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ComponentResponse> {
      return localVarFp
        .apiRestFullV00PublicComponentsGet(
          locales,
          filterManifestNameNotIn,
          filterManifestNameIn,
          filterManifestNameStart,
          filterManifestNameNotStart,
          filterManifestNameEq,
          filterManifestNameNotEq,
          filterManifestNameMatches,
          filterManifestNameDoesNotMatch,
          filterManifestNameMatchesAny,
          filterManifestNameMatchesAll,
          filterManifestNameDoesNotMatchAny,
          filterManifestNameDoesNotMatchAll,
          filterManifestNameLt,
          filterManifestNameLteq,
          filterManifestNameGt,
          filterManifestNameGteq,
          filterManifestNamePresent,
          filterManifestNameBlank,
          page,
          perPage,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List Participatory Spaces
     * @param {Array<ApiRestFullV00PublicSpacesGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameStart]
     * @param {string} [filterManifestNameNotStart]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {string} [filterManifestNameMatches]
     * @param {string} [filterManifestNameDoesNotMatch]
     * @param {string} [filterManifestNameMatchesAny]
     * @param {string} [filterManifestNameMatchesAll]
     * @param {string} [filterManifestNameDoesNotMatchAny]
     * @param {string} [filterManifestNameDoesNotMatchAll]
     * @param {string} [filterManifestNameLt]
     * @param {string} [filterManifestNameLteq]
     * @param {string} [filterManifestNameGt]
     * @param {string} [filterManifestNameGteq]
     * @param {string} [filterManifestNamePresent]
     * @param {string} [filterManifestNameBlank]
     * @param {Array<string>} [filterTitleNotIn]
     * @param {Array<string>} [filterTitleIn]
     * @param {string} [filterTitleStart]
     * @param {string} [filterTitleNotStart]
     * @param {string} [filterTitleEq]
     * @param {string} [filterTitleNotEq]
     * @param {string} [filterTitleMatches]
     * @param {string} [filterTitleDoesNotMatch]
     * @param {string} [filterTitleMatchesAny]
     * @param {string} [filterTitleMatchesAll]
     * @param {string} [filterTitleDoesNotMatchAny]
     * @param {string} [filterTitleDoesNotMatchAll]
     * @param {string} [filterTitleLt]
     * @param {string} [filterTitleLteq]
     * @param {string} [filterTitleGt]
     * @param {string} [filterTitleGteq]
     * @param {string} [filterTitlePresent]
     * @param {string} [filterTitleBlank]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00PublicSpacesGet(
      locales?: Array<ApiRestFullV00PublicSpacesGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>,
      filterManifestNameStart?: string,
      filterManifestNameNotStart?: string,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterManifestNameMatches?: string,
      filterManifestNameDoesNotMatch?: string,
      filterManifestNameMatchesAny?: string,
      filterManifestNameMatchesAll?: string,
      filterManifestNameDoesNotMatchAny?: string,
      filterManifestNameDoesNotMatchAll?: string,
      filterManifestNameLt?: string,
      filterManifestNameLteq?: string,
      filterManifestNameGt?: string,
      filterManifestNameGteq?: string,
      filterManifestNamePresent?: string,
      filterManifestNameBlank?: string,
      filterTitleNotIn?: Array<string>,
      filterTitleIn?: Array<string>,
      filterTitleStart?: string,
      filterTitleNotStart?: string,
      filterTitleEq?: string,
      filterTitleNotEq?: string,
      filterTitleMatches?: string,
      filterTitleDoesNotMatch?: string,
      filterTitleMatchesAny?: string,
      filterTitleMatchesAll?: string,
      filterTitleDoesNotMatchAny?: string,
      filterTitleDoesNotMatchAll?: string,
      filterTitleLt?: string,
      filterTitleLteq?: string,
      filterTitleGt?: string,
      filterTitleGteq?: string,
      filterTitlePresent?: string,
      filterTitleBlank?: string,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SpaceResponse> {
      return localVarFp
        .apiRestFullV00PublicSpacesGet(
          locales,
          filterManifestNameNotIn,
          filterManifestNameIn,
          filterManifestNameStart,
          filterManifestNameNotStart,
          filterManifestNameEq,
          filterManifestNameNotEq,
          filterManifestNameMatches,
          filterManifestNameDoesNotMatch,
          filterManifestNameMatchesAny,
          filterManifestNameMatchesAll,
          filterManifestNameDoesNotMatchAny,
          filterManifestNameDoesNotMatchAll,
          filterManifestNameLt,
          filterManifestNameLteq,
          filterManifestNameGt,
          filterManifestNameGteq,
          filterManifestNamePresent,
          filterManifestNameBlank,
          filterTitleNotIn,
          filterTitleIn,
          filterTitleStart,
          filterTitleNotStart,
          filterTitleEq,
          filterTitleNotEq,
          filterTitleMatches,
          filterTitleDoesNotMatch,
          filterTitleMatchesAny,
          filterTitleMatchesAll,
          filterTitleDoesNotMatchAny,
          filterTitleDoesNotMatchAll,
          filterTitleLt,
          filterTitleLteq,
          filterTitleGt,
          filterTitleGteq,
          filterTitlePresent,
          filterTitleBlank,
          page,
          perPage,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
  /**
   *
   * @summary List Components
   * @param {Array<ApiRestFullV00PublicComponentsGetLocalesEnum>} [locales]
   * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
   * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>} [filterManifestNameIn]
   * @param {string} [filterManifestNameStart]
   * @param {string} [filterManifestNameNotStart]
   * @param {string} [filterManifestNameEq]
   * @param {string} [filterManifestNameNotEq]
   * @param {string} [filterManifestNameMatches]
   * @param {string} [filterManifestNameDoesNotMatch]
   * @param {string} [filterManifestNameMatchesAny]
   * @param {string} [filterManifestNameMatchesAll]
   * @param {string} [filterManifestNameDoesNotMatchAny]
   * @param {string} [filterManifestNameDoesNotMatchAll]
   * @param {string} [filterManifestNameLt]
   * @param {string} [filterManifestNameLteq]
   * @param {string} [filterManifestNameGt]
   * @param {string} [filterManifestNameGteq]
   * @param {string} [filterManifestNamePresent]
   * @param {string} [filterManifestNameBlank]
   * @param {number} [page] Page number for pagination
   * @param {number} [perPage] Number of items per page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public apiRestFullV00PublicComponentsGet(
    locales?: Array<ApiRestFullV00PublicComponentsGetLocalesEnum>,
    filterManifestNameNotIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>,
    filterManifestNameIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>,
    filterManifestNameStart?: string,
    filterManifestNameNotStart?: string,
    filterManifestNameEq?: string,
    filterManifestNameNotEq?: string,
    filterManifestNameMatches?: string,
    filterManifestNameDoesNotMatch?: string,
    filterManifestNameMatchesAny?: string,
    filterManifestNameMatchesAll?: string,
    filterManifestNameDoesNotMatchAny?: string,
    filterManifestNameDoesNotMatchAll?: string,
    filterManifestNameLt?: string,
    filterManifestNameLteq?: string,
    filterManifestNameGt?: string,
    filterManifestNameGteq?: string,
    filterManifestNamePresent?: string,
    filterManifestNameBlank?: string,
    page?: number,
    perPage?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return PublicApiFp(this.configuration)
      .apiRestFullV00PublicComponentsGet(
        locales,
        filterManifestNameNotIn,
        filterManifestNameIn,
        filterManifestNameStart,
        filterManifestNameNotStart,
        filterManifestNameEq,
        filterManifestNameNotEq,
        filterManifestNameMatches,
        filterManifestNameDoesNotMatch,
        filterManifestNameMatchesAny,
        filterManifestNameMatchesAll,
        filterManifestNameDoesNotMatchAny,
        filterManifestNameDoesNotMatchAll,
        filterManifestNameLt,
        filterManifestNameLteq,
        filterManifestNameGt,
        filterManifestNameGteq,
        filterManifestNamePresent,
        filterManifestNameBlank,
        page,
        perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List Participatory Spaces
   * @param {Array<ApiRestFullV00PublicSpacesGetLocalesEnum>} [locales]
   * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
   * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>} [filterManifestNameIn]
   * @param {string} [filterManifestNameStart]
   * @param {string} [filterManifestNameNotStart]
   * @param {string} [filterManifestNameEq]
   * @param {string} [filterManifestNameNotEq]
   * @param {string} [filterManifestNameMatches]
   * @param {string} [filterManifestNameDoesNotMatch]
   * @param {string} [filterManifestNameMatchesAny]
   * @param {string} [filterManifestNameMatchesAll]
   * @param {string} [filterManifestNameDoesNotMatchAny]
   * @param {string} [filterManifestNameDoesNotMatchAll]
   * @param {string} [filterManifestNameLt]
   * @param {string} [filterManifestNameLteq]
   * @param {string} [filterManifestNameGt]
   * @param {string} [filterManifestNameGteq]
   * @param {string} [filterManifestNamePresent]
   * @param {string} [filterManifestNameBlank]
   * @param {Array<string>} [filterTitleNotIn]
   * @param {Array<string>} [filterTitleIn]
   * @param {string} [filterTitleStart]
   * @param {string} [filterTitleNotStart]
   * @param {string} [filterTitleEq]
   * @param {string} [filterTitleNotEq]
   * @param {string} [filterTitleMatches]
   * @param {string} [filterTitleDoesNotMatch]
   * @param {string} [filterTitleMatchesAny]
   * @param {string} [filterTitleMatchesAll]
   * @param {string} [filterTitleDoesNotMatchAny]
   * @param {string} [filterTitleDoesNotMatchAll]
   * @param {string} [filterTitleLt]
   * @param {string} [filterTitleLteq]
   * @param {string} [filterTitleGt]
   * @param {string} [filterTitleGteq]
   * @param {string} [filterTitlePresent]
   * @param {string} [filterTitleBlank]
   * @param {number} [page] Page number for pagination
   * @param {number} [perPage] Number of items per page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public apiRestFullV00PublicSpacesGet(
    locales?: Array<ApiRestFullV00PublicSpacesGetLocalesEnum>,
    filterManifestNameNotIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>,
    filterManifestNameIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>,
    filterManifestNameStart?: string,
    filterManifestNameNotStart?: string,
    filterManifestNameEq?: string,
    filterManifestNameNotEq?: string,
    filterManifestNameMatches?: string,
    filterManifestNameDoesNotMatch?: string,
    filterManifestNameMatchesAny?: string,
    filterManifestNameMatchesAll?: string,
    filterManifestNameDoesNotMatchAny?: string,
    filterManifestNameDoesNotMatchAll?: string,
    filterManifestNameLt?: string,
    filterManifestNameLteq?: string,
    filterManifestNameGt?: string,
    filterManifestNameGteq?: string,
    filterManifestNamePresent?: string,
    filterManifestNameBlank?: string,
    filterTitleNotIn?: Array<string>,
    filterTitleIn?: Array<string>,
    filterTitleStart?: string,
    filterTitleNotStart?: string,
    filterTitleEq?: string,
    filterTitleNotEq?: string,
    filterTitleMatches?: string,
    filterTitleDoesNotMatch?: string,
    filterTitleMatchesAny?: string,
    filterTitleMatchesAll?: string,
    filterTitleDoesNotMatchAny?: string,
    filterTitleDoesNotMatchAll?: string,
    filterTitleLt?: string,
    filterTitleLteq?: string,
    filterTitleGt?: string,
    filterTitleGteq?: string,
    filterTitlePresent?: string,
    filterTitleBlank?: string,
    page?: number,
    perPage?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return PublicApiFp(this.configuration)
      .apiRestFullV00PublicSpacesGet(
        locales,
        filterManifestNameNotIn,
        filterManifestNameIn,
        filterManifestNameStart,
        filterManifestNameNotStart,
        filterManifestNameEq,
        filterManifestNameNotEq,
        filterManifestNameMatches,
        filterManifestNameDoesNotMatch,
        filterManifestNameMatchesAny,
        filterManifestNameMatchesAll,
        filterManifestNameDoesNotMatchAny,
        filterManifestNameDoesNotMatchAll,
        filterManifestNameLt,
        filterManifestNameLteq,
        filterManifestNameGt,
        filterManifestNameGteq,
        filterManifestNamePresent,
        filterManifestNameBlank,
        filterTitleNotIn,
        filterTitleIn,
        filterTitleStart,
        filterTitleNotStart,
        filterTitleEq,
        filterTitleNotEq,
        filterTitleMatches,
        filterTitleDoesNotMatch,
        filterTitleMatchesAny,
        filterTitleMatchesAll,
        filterTitleDoesNotMatchAny,
        filterTitleDoesNotMatchAll,
        filterTitleLt,
        filterTitleLteq,
        filterTitleGt,
        filterTitleGteq,
        filterTitlePresent,
        filterTitleBlank,
        page,
        perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ApiRestFullV00PublicComponentsGetLocalesEnum = {
  En: "en",
  Fr: "fr",
} as const;
export type ApiRestFullV00PublicComponentsGetLocalesEnum =
  (typeof ApiRestFullV00PublicComponentsGetLocalesEnum)[keyof typeof ApiRestFullV00PublicComponentsGetLocalesEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;
export type ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum =
  (typeof ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum)[keyof typeof ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;
export type ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum =
  (typeof ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum)[keyof typeof ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicSpacesGetLocalesEnum = {
  En: "en",
  Fr: "fr",
} as const;
export type ApiRestFullV00PublicSpacesGetLocalesEnum =
  (typeof ApiRestFullV00PublicSpacesGetLocalesEnum)[keyof typeof ApiRestFullV00PublicSpacesGetLocalesEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;
export type ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum =
  (typeof ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum)[keyof typeof ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;
export type ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum =
  (typeof ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum)[keyof typeof ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum];

/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary List available organizations
     * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate]
     * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00SystemOrganizationsGet: async (
      populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>,
      locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>,
      page?: number,
      perPage?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rest_full/v0.0/system/organizations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (populate) {
        localVarQueryParameter["populate[]"] = populate;
      }

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary List available organizations
     * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate]
     * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiRestFullV00SystemOrganizationsGet(
      populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>,
      locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<OrganizationsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiRestFullV00SystemOrganizationsGet(
          populate,
          locales,
          page,
          perPage,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SystemApi.apiRestFullV00SystemOrganizationsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SystemApiFp(configuration);
  return {
    /**
     *
     * @summary List available organizations
     * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate]
     * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00SystemOrganizationsGet(
      populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>,
      locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationsResponse> {
      return localVarFp
        .apiRestFullV00SystemOrganizationsGet(
          populate,
          locales,
          page,
          perPage,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
  /**
   *
   * @summary List available organizations
   * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate]
   * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales]
   * @param {number} [page] Page number for pagination
   * @param {number} [perPage] Number of items per page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public apiRestFullV00SystemOrganizationsGet(
    populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>,
    locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>,
    page?: number,
    perPage?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return SystemApiFp(this.configuration)
      .apiRestFullV00SystemOrganizationsGet(
        populate,
        locales,
        page,
        perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ApiRestFullV00SystemOrganizationsGetPopulateEnum = {
  Host: "host",
  SecondaryHosts: "secondary_hosts",
  Name: "name",
  CreatedAt: "created_at",
  UpdatedAt: "updated_at",
} as const;
export type ApiRestFullV00SystemOrganizationsGetPopulateEnum =
  (typeof ApiRestFullV00SystemOrganizationsGetPopulateEnum)[keyof typeof ApiRestFullV00SystemOrganizationsGetPopulateEnum];
/**
 * @export
 */
export const ApiRestFullV00SystemOrganizationsGetLocalesEnum = {
  En: "en",
  Fr: "fr",
} as const;
export type ApiRestFullV00SystemOrganizationsGetLocalesEnum =
  (typeof ApiRestFullV00SystemOrganizationsGetLocalesEnum)[keyof typeof ApiRestFullV00SystemOrganizationsGetLocalesEnum];
