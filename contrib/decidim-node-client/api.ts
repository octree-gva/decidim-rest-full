/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * A RestFull API for Decidim, to be able to CRUD resources from Decidim.  ## Authentication [Get a token](https://octree-gva.github.io/decidim-rest-full/category/authentication) from our `/oauth/token` routes,  following OAuth specs on Credential Flows or Resource Owner Password Credentials Flow.  ### Permissions A permission system is attached to the created OAuth application, that is designed in two levels:   - **scope**: a broad permission to access a collection of endpoints - **abilities**: a fine grained permission system that allow actions.   The scopes and abilities are manageable in your System Admin Panel.  ### Multi-tenant Decidim is multi-tenant, and this API supports it. - The **`system` scope** endpoints are available in any tenant - The tenant `host` attribute will be used to guess which tenant you are requesting.    For example, given a tenant `example.org` and `foobar.org`, the endpoint   * `example.org/oauth/token` will ask a token for the example.org organization   * `foobar.org/oauth/token` for foobar.org.
 *
 * The version of the OpenAPI document: v0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface ApiError
 */
export interface ApiError {
  /**
   * Error code, starting with HTTP Code
   * @type {number}
   * @memberof ApiError
   */
  error_code: number;
  /**
   * Error message
   * @type {string}
   * @memberof ApiError
   */
  message: string;
  /**
   * Error detail, mostly validation error
   * @type {string}
   * @memberof ApiError
   */
  detail?: string;
}
/**
 *
 * @export
 * @interface AttachedComponents
 */
export interface AttachedComponents {
  /**
   *
   * @type {Array<AttachedComponentsDataInner>}
   * @memberof AttachedComponents
   */
  data: Array<AttachedComponentsDataInner>;
  /**
   *
   * @type {AttachedComponentsMeta}
   * @memberof AttachedComponents
   */
  meta: AttachedComponentsMeta;
  /**
   *
   * @type {AttachedComponentsLinks}
   * @memberof AttachedComponents
   */
  links: AttachedComponentsLinks;
}
/**
 *
 * @export
 * @interface AttachedComponentsDataInner
 */
export interface AttachedComponentsDataInner {
  /**
   *
   * @type {string}
   * @memberof AttachedComponentsDataInner
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof AttachedComponentsDataInner
   */
  type: AttachedComponentsDataInnerTypeEnum;
}

export const AttachedComponentsDataInnerTypeEnum = {
  PageComponent: "page_component",
  ProposalComponent: "proposal_component",
  MeetingComponent: "meeting_component",
  BudgetComponent: "budget_component",
  SurveyComponent: "survey_component",
  AccountabilityComponent: "accountability_component",
  DebateComponent: "debate_component",
  SortitionComponent: "sortition_component",
  BlogComponent: "blog_component",
} as const;

export type AttachedComponentsDataInnerTypeEnum =
  (typeof AttachedComponentsDataInnerTypeEnum)[keyof typeof AttachedComponentsDataInnerTypeEnum];

/**
 *
 * @export
 * @interface AttachedComponentsLinks
 */
export interface AttachedComponentsLinks {
  /**
   * Complete list
   * @type {string}
   * @memberof AttachedComponentsLinks
   */
  related: string;
}
/**
 *
 * @export
 * @interface AttachedComponentsMeta
 */
export interface AttachedComponentsMeta {
  /**
   * Total count for components association
   * @type {number}
   * @memberof AttachedComponentsMeta
   */
  count: number;
}
/**
 *
 * @export
 * @interface ClientCredential
 */
export interface ClientCredential {
  /**
   * Client Credential Flow, for **machine-to-machine**
   * @type {string}
   * @memberof ClientCredential
   */
  grant_type: ClientCredentialGrantTypeEnum;
  /**
   * OAuth application Client Id
   * @type {string}
   * @memberof ClientCredential
   */
  client_id: string;
  /**
   * OAuth application Client Secret
   * @type {string}
   * @memberof ClientCredential
   */
  client_secret: string;
  /**
   * Requested scopes
   * @type {string}
   * @memberof ClientCredential
   */
  scope: ClientCredentialScopeEnum;
}

export const ClientCredentialGrantTypeEnum = {
  ClientCredentials: "client_credentials",
} as const;

export type ClientCredentialGrantTypeEnum =
  (typeof ClientCredentialGrantTypeEnum)[keyof typeof ClientCredentialGrantTypeEnum];
export const ClientCredentialScopeEnum = {
  Public: "public",
  Spaces: "spaces",
  System: "system",
  Proposals: "proposals",
  Meetings: "meetings",
  Debates: "debates",
  Pages: "pages",
} as const;

export type ClientCredentialScopeEnum =
  (typeof ClientCredentialScopeEnum)[keyof typeof ClientCredentialScopeEnum];

/**
 *
 * @export
 * @interface Component
 */
export interface Component {
  /**
   * Component Id
   * @type {string}
   * @memberof Component
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Component
   */
  type: ComponentTypeEnum;
  /**
   *
   * @type {ComponentAttributes}
   * @memberof Component
   */
  attributes: ComponentAttributes;
  /**
   *
   * @type {ComponentMetadata}
   * @memberof Component
   */
  meta: ComponentMetadata;
  /**
   *
   * @type {ComponentLinks}
   * @memberof Component
   */
  links: ComponentLinks;
  /**
   *
   * @type {ComponentRelationships}
   * @memberof Component
   */
  relationships?: ComponentRelationships;
}

export const ComponentTypeEnum = {
  PageComponent: "page_component",
  ProposalComponent: "proposal_component",
  MeetingComponent: "meeting_component",
  BudgetComponent: "budget_component",
  SurveyComponent: "survey_component",
  AccountabilityComponent: "accountability_component",
  DebateComponent: "debate_component",
  SortitionComponent: "sortition_component",
  BlogComponent: "blog_component",
} as const;

export type ComponentTypeEnum =
  (typeof ComponentTypeEnum)[keyof typeof ComponentTypeEnum];

/**
 *
 * @export
 * @interface ComponentAttributes
 */
export interface ComponentAttributes {
  /**
   *
   * @type {TranslatedProp}
   * @memberof ComponentAttributes
   */
  name: TranslatedProp;
  /**
   *
   * @type {TranslatedProp}
   * @memberof ComponentAttributes
   */
  global_announcement?: TranslatedProp;
  /**
   * Manifest name of the component
   * @type {string}
   * @memberof ComponentAttributes
   */
  manifest_name: ComponentAttributesManifestNameEnum;
  /**
   * Associate space class name. Part of the polymorphic association (participatory_space_type,participatory_space_id)
   * @type {string}
   * @memberof ComponentAttributes
   */
  participatory_space_type: string;
  /**
   * Associate space id. Part of the polymorphic association (participatory_space_type,participatory_space_id)
   * @type {string}
   * @memberof ComponentAttributes
   */
  participatory_space_id: string;
  /**
   * Creation date of the component
   * @type {string}
   * @memberof ComponentAttributes
   */
  created_at: string;
  /**
   * Last update date of the component
   * @type {string}
   * @memberof ComponentAttributes
   */
  updated_at: string;
}

export const ComponentAttributesManifestNameEnum = {
  Dummy: "dummy",
  Pages: "pages",
  Proposals: "proposals",
  Meetings: "meetings",
  Budgets: "budgets",
  Surveys: "surveys",
  Accountability: "accountability",
  Debates: "debates",
  Sortitions: "sortitions",
  Blogs: "blogs",
} as const;

export type ComponentAttributesManifestNameEnum =
  (typeof ComponentAttributesManifestNameEnum)[keyof typeof ComponentAttributesManifestNameEnum];

/**
 *
 * @export
 * @interface ComponentLinks
 */
export interface ComponentLinks {
  /**
   * API URL to the component
   * @type {string}
   * @memberof ComponentLinks
   */
  self: string;
  /**
   * Component details API URL
   * @type {string}
   * @memberof ComponentLinks
   */
  related: string;
}
/**
 *
 * @export
 * @interface ComponentMetadata
 */
export interface ComponentMetadata {
  [key: string]: ComponentMetadataValue | any;

  /**
   * Published component?
   * @type {boolean}
   * @memberof ComponentMetadata
   */
  published: boolean;
  /**
   * Component handle scopes?
   * @type {boolean}
   * @memberof ComponentMetadata
   */
  scopes_enabled: boolean;
}
/**
 * @type ComponentMetadataValue
 * @export
 */
export type ComponentMetadataValue = TranslatedProp | boolean | number | string;

/**
 *
 * @export
 * @interface ComponentRelationships
 */
export interface ComponentRelationships {
  /**
   *
   * @type {ComponentResourcesDescriptor}
   * @memberof ComponentRelationships
   */
  resources: ComponentResourcesDescriptor;
}
/**
 *
 * @export
 * @interface ComponentResource
 */
export interface ComponentResource {
  /**
   * Resource ID
   * @type {string}
   * @memberof ComponentResource
   */
  id: string;
  /**
   * Resource Type
   * @type {string}
   * @memberof ComponentResource
   */
  type: string;
}
/**
 *
 * @export
 * @interface ComponentResourceDescriptorMeta
 */
export interface ComponentResourceDescriptorMeta {
  /**
   * Total count of resources
   * @type {number}
   * @memberof ComponentResourceDescriptorMeta
   */
  count: number;
}
/**
 *
 * @export
 * @interface ComponentResourcesDescriptor
 */
export interface ComponentResourcesDescriptor {
  /**
   *
   * @type {Array<ComponentResource>}
   * @memberof ComponentResourcesDescriptor
   */
  data: Array<ComponentResource>;
  /**
   *
   * @type {ComponentResourceDescriptorMeta}
   * @memberof ComponentResourcesDescriptor
   */
  meta: ComponentResourceDescriptorMeta;
}
/**
 *
 * @export
 * @interface ComponentResponse
 */
export interface ComponentResponse {
  /**
   *
   * @type {Component}
   * @memberof ComponentResponse
   */
  data: Component;
}
/**
 *
 * @export
 * @interface ComponentsResponse
 */
export interface ComponentsResponse {
  /**
   *
   * @type {Array<Component>}
   * @memberof ComponentsResponse
   */
  data: Array<Component>;
}
/**
 *
 * @export
 * @interface Impersonation
 */
export interface Impersonation {
  /**
   * Resource Owner Password Credentials (ROPC) Flow, for **user impersonation**
   * @type {string}
   * @memberof Impersonation
   */
  grant_type: ImpersonationGrantTypeEnum;
  /**
   * Type of ROPC
   * @type {string}
   * @memberof Impersonation
   */
  auth_type: ImpersonationAuthTypeEnum;
  /**
   * User nickname, unique and at least 6 alphanumeric chars.
   * @type {string}
   * @memberof Impersonation
   */
  username: string;
  /**
   * Additional properties for the user (private)
   * @type {{ [key: string]: string; }}
   * @memberof Impersonation
   */
  extra?: { [key: string]: string };
  /**
   *
   * @type {UserImpersonationSettings}
   * @memberof Impersonation
   */
  meta?: UserImpersonationSettings;
  /**
   * OAuth application Client Id
   * @type {string}
   * @memberof Impersonation
   */
  client_id: string;
  /**
   * OAuth application Client Secret
   * @type {string}
   * @memberof Impersonation
   */
  client_secret: string;
  /**
   * Request scopes
   * @type {string}
   * @memberof Impersonation
   */
  scope: ImpersonationScopeEnum;
}

export const ImpersonationGrantTypeEnum = {
  Password: "password",
} as const;

export type ImpersonationGrantTypeEnum =
  (typeof ImpersonationGrantTypeEnum)[keyof typeof ImpersonationGrantTypeEnum];
export const ImpersonationAuthTypeEnum = {
  Impersonate: "impersonate",
} as const;

export type ImpersonationAuthTypeEnum =
  (typeof ImpersonationAuthTypeEnum)[keyof typeof ImpersonationAuthTypeEnum];
export const ImpersonationScopeEnum = {
  Public: "public",
  Spaces: "spaces",
  Proposals: "proposals",
  Meetings: "meetings",
  Debates: "debates",
  Pages: "pages",
} as const;

export type ImpersonationScopeEnum =
  (typeof ImpersonationScopeEnum)[keyof typeof ImpersonationScopeEnum];

/**
 *
 * @export
 * @interface Login
 */
export interface Login {
  /**
   * Resource Owner Password Credentials (ROPC) Flow, for **user login**
   * @type {string}
   * @memberof Login
   */
  grant_type: LoginGrantTypeEnum;
  /**
   * Type of ROPC
   * @type {string}
   * @memberof Login
   */
  auth_type: LoginAuthTypeEnum;
  /**
   * User nickname
   * @type {string}
   * @memberof Login
   */
  username: string;
  /**
   * User password
   * @type {string}
   * @memberof Login
   */
  password: string;
  /**
   * OAuth application Client Id
   * @type {string}
   * @memberof Login
   */
  client_id: string;
  /**
   * OAuth application Client Secret
   * @type {string}
   * @memberof Login
   */
  client_secret: string;
  /**
   * Request scopes
   * @type {string}
   * @memberof Login
   */
  scope: LoginScopeEnum;
}

export const LoginGrantTypeEnum = {
  Password: "password",
} as const;

export type LoginGrantTypeEnum =
  (typeof LoginGrantTypeEnum)[keyof typeof LoginGrantTypeEnum];
export const LoginAuthTypeEnum = {
  Login: "login",
} as const;

export type LoginAuthTypeEnum =
  (typeof LoginAuthTypeEnum)[keyof typeof LoginAuthTypeEnum];
export const LoginScopeEnum = {
  Public: "public",
  Spaces: "spaces",
  Proposals: "proposals",
  Meetings: "meetings",
  Debates: "debates",
  Pages: "pages",
} as const;

export type LoginScopeEnum =
  (typeof LoginScopeEnum)[keyof typeof LoginScopeEnum];

/**
 * @type OauthGrantParam
 * @export
 */
export type OauthGrantParam = ClientCredential | Impersonation | Login;

/**
 *
 * @export
 * @interface Organization
 */
export interface Organization {
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  type: OrganizationTypeEnum;
  /**
   *
   * @type {OrganizationAttributes}
   * @memberof Organization
   */
  attributes: OrganizationAttributes;
  /**
   *
   * @type {OrganizationMeta}
   * @memberof Organization
   */
  meta: OrganizationMeta;
}

export const OrganizationTypeEnum = {
  Organization: "organization",
} as const;

export type OrganizationTypeEnum =
  (typeof OrganizationTypeEnum)[keyof typeof OrganizationTypeEnum];

/**
 *
 * @export
 * @interface OrganizationAttributes
 */
export interface OrganizationAttributes {
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof OrganizationAttributes
   */
  name?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof OrganizationAttributes
   */
  host?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof OrganizationAttributes
   */
  secondary_hosts?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof OrganizationAttributes
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationAttributes
   */
  updated_at: string;
}
/**
 *
 * @export
 * @interface OrganizationMeta
 */
export interface OrganizationMeta {
  /**
   *
   * @type {Array<string>}
   * @memberof OrganizationMeta
   */
  locales: Array<string>;
}
/**
 *
 * @export
 * @interface OrganizationsResponse
 */
export interface OrganizationsResponse {
  /**
   *
   * @type {Array<Organization>}
   * @memberof OrganizationsResponse
   */
  data: Array<Organization>;
}
/**
 * @type PasswordGrantParam
 * @export
 */
export type PasswordGrantParam = Impersonation | Login;

/**
 *
 * @export
 * @interface Space
 */
export interface Space {
  /**
   * Space Id
   * @type {string}
   * @memberof Space
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Space
   */
  type: SpaceTypeEnum;
  /**
   *
   * @type {SpaceAttributes}
   * @memberof Space
   */
  attributes: SpaceAttributes;
  /**
   *
   * @type {SpaceRelationships}
   * @memberof Space
   */
  relationships: SpaceRelationships;
  /**
   *
   * @type {SpaceLinks}
   * @memberof Space
   */
  links: SpaceLinks;
}

export const SpaceTypeEnum = {
  Space: "space",
} as const;

export type SpaceTypeEnum = (typeof SpaceTypeEnum)[keyof typeof SpaceTypeEnum];

/**
 *
 * @export
 * @interface SpaceAttributes
 */
export interface SpaceAttributes {
  /**
   *
   * @type {TranslatedProp}
   * @memberof SpaceAttributes
   */
  title: TranslatedProp;
  /**
   *
   * @type {TranslatedProp}
   * @memberof SpaceAttributes
   */
  subtitle?: TranslatedProp;
  /**
   *
   * @type {TranslatedProp}
   * @memberof SpaceAttributes
   */
  short_description?: TranslatedProp;
  /**
   *
   * @type {TranslatedProp}
   * @memberof SpaceAttributes
   */
  description?: TranslatedProp;
  /**
   *
   * @type {string}
   * @memberof SpaceAttributes
   */
  manifest_name: SpaceAttributesManifestNameEnum;
  /**
   *
   * @type {string}
   * @memberof SpaceAttributes
   */
  participatory_space_type?: string;
  /**
   * Space visibility
   * @type {string}
   * @memberof SpaceAttributes
   */
  visibility: SpaceAttributesVisibilityEnum;
  /**
   * Space creation date
   * @type {string}
   * @memberof SpaceAttributes
   */
  created_at: string;
  /**
   * Last update of the space
   * @type {string}
   * @memberof SpaceAttributes
   */
  updated_at: string;
}

export const SpaceAttributesManifestNameEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;

export type SpaceAttributesManifestNameEnum =
  (typeof SpaceAttributesManifestNameEnum)[keyof typeof SpaceAttributesManifestNameEnum];
export const SpaceAttributesVisibilityEnum = {
  Public: "public",
  Transparent: "transparent",
  Private: "private",
} as const;

export type SpaceAttributesVisibilityEnum =
  (typeof SpaceAttributesVisibilityEnum)[keyof typeof SpaceAttributesVisibilityEnum];

/**
 *
 * @export
 * @interface SpaceLinks
 */
export interface SpaceLinks {
  /**
   *
   * @type {string}
   * @memberof SpaceLinks
   */
  self: string;
}
/**
 *
 * @export
 * @interface SpaceRelationships
 */
export interface SpaceRelationships {
  /**
   *
   * @type {AttachedComponents}
   * @memberof SpaceRelationships
   */
  components: AttachedComponents;
}
/**
 *
 * @export
 * @interface SpaceResponse
 */
export interface SpaceResponse {
  /**
   *
   * @type {Space}
   * @memberof SpaceResponse
   */
  data: Space;
}
/**
 *
 * @export
 * @interface SpacesResponse
 */
export interface SpacesResponse {
  /**
   *
   * @type {Array<Space>}
   * @memberof SpacesResponse
   */
  data: Array<Space>;
}
/**
 * Hash with translated data, key=locale value=translation
 * @export
 * @interface TranslatedProp
 */
export interface TranslatedProp {
  /**
   * Translation in en
   * @type {string}
   * @memberof TranslatedProp
   */
  en?: string;
  /**
   * Translation in fr
   * @type {string}
   * @memberof TranslatedProp
   */
  fr?: string;
}
/**
 * Impersonation Settings
 * @export
 * @interface UserImpersonationSettings
 */
export interface UserImpersonationSettings {
  /**
   * Register the user if it does not exists. Default: false
   * @type {boolean}
   * @memberof UserImpersonationSettings
   */
  register_on_missing?: boolean;
  /**
   * Accept the TOS on registration, used only if register_on_missing=true. Default: false
   * @type {boolean}
   * @memberof UserImpersonationSettings
   */
  accept_tos_on_register?: boolean;
  /**
   * Skip email confirmation on creation, used only if register_on_missing=true. Default: false
   * @type {boolean}
   * @memberof UserImpersonationSettings
   */
  skip_confirmation_on_register?: boolean;
  /**
   * User email to use on registration. used only if register_on_missing=true. Default to <username>@example.org
   * @type {string}
   * @memberof UserImpersonationSettings
   */
  email?: string;
  /**
   * User name. Used only if register_on_missing=true. Default to username
   * @type {string}
   * @memberof UserImpersonationSettings
   */
  name?: string;
}

/**
 * OAuthApi - axios parameter creator
 * @export
 */
export const OAuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Request a OAuth token throught ROPC
     * @param {OauthGrantParam} oauthGrantParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthTokenPost: async (
      oauthGrantParam: OauthGrantParam,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'oauthGrantParam' is not null or undefined
      assertParamExists("oauthTokenPost", "oauthGrantParam", oauthGrantParam);
      const localVarPath = `/oauth/token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oauthGrantParam,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OAuthApi - functional programming interface
 * @export
 */
export const OAuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OAuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Request a OAuth token throught ROPC
     * @param {OauthGrantParam} oauthGrantParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oauthTokenPost(
      oauthGrantParam: OauthGrantParam,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.oauthTokenPost(
        oauthGrantParam,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OAuthApi.oauthTokenPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OAuthApi - factory interface
 * @export
 */
export const OAuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OAuthApiFp(configuration);
  return {
    /**
     *
     * @summary Request a OAuth token throught ROPC
     * @param {OauthGrantParam} oauthGrantParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthTokenPost(
      oauthGrantParam: OauthGrantParam,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .oauthTokenPost(oauthGrantParam, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OAuthApi - object-oriented interface
 * @export
 * @class OAuthApi
 * @extends {BaseAPI}
 */
export class OAuthApi extends BaseAPI {
  /**
   *
   * @summary Request a OAuth token throught ROPC
   * @param {OauthGrantParam} oauthGrantParam
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuthApi
   */
  public oauthTokenPost(
    oauthGrantParam: OauthGrantParam,
    options?: RawAxiosRequestConfig,
  ) {
    return OAuthApiFp(this.configuration)
      .oauthTokenPost(oauthGrantParam, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary List Components
     * @param {Array<ApiRestFullV00PublicComponentsGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {Array<string>} [filterParticipatorySpaceIdIn]
     * @param {string} [filterParticipatorySpaceIdEq]
     * @param {Array<string>} [filterParticipatorySpaceTypeIn]
     * @param {string} [filterParticipatorySpaceTypeEq]
     * @param {string} [filterNameStart]
     * @param {string} [filterNameEq]
     * @param {string} [filterNameNotEq]
     * @param {string} [filterNameMatches]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00PublicComponentsGet: async (
      locales?: Array<ApiRestFullV00PublicComponentsGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterParticipatorySpaceIdIn?: Array<string>,
      filterParticipatorySpaceIdEq?: string,
      filterParticipatorySpaceTypeIn?: Array<string>,
      filterParticipatorySpaceTypeEq?: string,
      filterNameStart?: string,
      filterNameEq?: string,
      filterNameNotEq?: string,
      filterNameMatches?: string,
      page?: number,
      perPage?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rest_full/v0.0/public/components`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication resourceOwnerFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      if (filterManifestNameNotIn) {
        localVarQueryParameter["filter[manifest_name_not_in][]"] =
          filterManifestNameNotIn;
      }

      if (filterManifestNameIn) {
        localVarQueryParameter["filter[manifest_name_in][]"] =
          filterManifestNameIn;
      }

      if (filterManifestNameEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_eq]"] =
          filterManifestNameEq;
      }

      if (filterManifestNameNotEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_not_eq]"] =
          filterManifestNameNotEq;
      }

      if (filterParticipatorySpaceIdIn) {
        localVarQueryParameter["filter[participatory_space_id_in][]"] =
          filterParticipatorySpaceIdIn;
      }

      if (filterParticipatorySpaceIdEq !== undefined) {
        localVarQueryParameter["filter[participatory_space_id_eq]"] =
          filterParticipatorySpaceIdEq;
      }

      if (filterParticipatorySpaceTypeIn) {
        localVarQueryParameter["filter[participatory_space_type_in][]"] =
          filterParticipatorySpaceTypeIn;
      }

      if (filterParticipatorySpaceTypeEq !== undefined) {
        localVarQueryParameter["filter[participatory_space_type_eq]"] =
          filterParticipatorySpaceTypeEq;
      }

      if (filterNameStart !== undefined) {
        localVarQueryParameter["filter[name_start]"] = filterNameStart;
      }

      if (filterNameEq !== undefined) {
        localVarQueryParameter["filter[name_eq]"] = filterNameEq;
      }

      if (filterNameNotEq !== undefined) {
        localVarQueryParameter["filter[name_not_eq]"] = filterNameNotEq;
      }

      if (filterNameMatches !== undefined) {
        localVarQueryParameter["filter[name_matches]"] = filterNameMatches;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Show a Component
     * @param {number} id
     * @param {Array<ApiRestFullV00PublicComponentsIdGetLocalesEnum>} [locales]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00PublicComponentsIdGet: async (
      id: number,
      locales?: Array<ApiRestFullV00PublicComponentsIdGetLocalesEnum>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiRestFullV00PublicComponentsIdGet", "id", id);
      const localVarPath = `/api/rest_full/v0.0/public/components/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication resourceOwnerFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List Participatory Spaces
     * @param {Array<ApiRestFullV00PublicSpacesGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {Array<string>} [filterTitleNotIn]
     * @param {Array<string>} [filterTitleIn]
     * @param {string} [filterTitleStart]
     * @param {string} [filterTitleNotStart]
     * @param {string} [filterTitleEq]
     * @param {string} [filterTitleNotEq]
     * @param {string} [filterTitleMatches]
     * @param {string} [filterTitleDoesNotMatch]
     * @param {ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum} [filterTitlePresent]
     * @param {ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum} [filterTitleBlank]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00PublicSpacesGet: async (
      locales?: Array<ApiRestFullV00PublicSpacesGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterTitleNotIn?: Array<string>,
      filterTitleIn?: Array<string>,
      filterTitleStart?: string,
      filterTitleNotStart?: string,
      filterTitleEq?: string,
      filterTitleNotEq?: string,
      filterTitleMatches?: string,
      filterTitleDoesNotMatch?: string,
      filterTitlePresent?: ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum,
      filterTitleBlank?: ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum,
      page?: number,
      perPage?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rest_full/v0.0/public/spaces`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication resourceOwnerFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      if (filterManifestNameNotIn) {
        localVarQueryParameter["filter[manifest_name_not_in][]"] =
          filterManifestNameNotIn;
      }

      if (filterManifestNameIn) {
        localVarQueryParameter["filter[manifest_name_in][]"] =
          filterManifestNameIn;
      }

      if (filterManifestNameEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_eq]"] =
          filterManifestNameEq;
      }

      if (filterManifestNameNotEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_not_eq]"] =
          filterManifestNameNotEq;
      }

      if (filterTitleNotIn) {
        localVarQueryParameter["filter[title_not_in][]"] = filterTitleNotIn;
      }

      if (filterTitleIn) {
        localVarQueryParameter["filter[title_in][]"] = filterTitleIn;
      }

      if (filterTitleStart !== undefined) {
        localVarQueryParameter["filter[title_start]"] = filterTitleStart;
      }

      if (filterTitleNotStart !== undefined) {
        localVarQueryParameter["filter[title_not_start]"] = filterTitleNotStart;
      }

      if (filterTitleEq !== undefined) {
        localVarQueryParameter["filter[title_eq]"] = filterTitleEq;
      }

      if (filterTitleNotEq !== undefined) {
        localVarQueryParameter["filter[title_not_eq]"] = filterTitleNotEq;
      }

      if (filterTitleMatches !== undefined) {
        localVarQueryParameter["filter[title_matches]"] = filterTitleMatches;
      }

      if (filterTitleDoesNotMatch !== undefined) {
        localVarQueryParameter["filter[title_does_not_match]"] =
          filterTitleDoesNotMatch;
      }

      if (filterTitlePresent !== undefined) {
        localVarQueryParameter["filter[title_present]"] = filterTitlePresent;
      }

      if (filterTitleBlank !== undefined) {
        localVarQueryParameter["filter[title_blank]"] = filterTitleBlank;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary List Components
     * @param {Array<ApiRestFullV00PublicComponentsGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {Array<string>} [filterParticipatorySpaceIdIn]
     * @param {string} [filterParticipatorySpaceIdEq]
     * @param {Array<string>} [filterParticipatorySpaceTypeIn]
     * @param {string} [filterParticipatorySpaceTypeEq]
     * @param {string} [filterNameStart]
     * @param {string} [filterNameEq]
     * @param {string} [filterNameNotEq]
     * @param {string} [filterNameMatches]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiRestFullV00PublicComponentsGet(
      locales?: Array<ApiRestFullV00PublicComponentsGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterParticipatorySpaceIdIn?: Array<string>,
      filterParticipatorySpaceIdEq?: string,
      filterParticipatorySpaceTypeIn?: Array<string>,
      filterParticipatorySpaceTypeEq?: string,
      filterNameStart?: string,
      filterNameEq?: string,
      filterNameNotEq?: string,
      filterNameMatches?: string,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ComponentsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiRestFullV00PublicComponentsGet(
          locales,
          filterManifestNameNotIn,
          filterManifestNameIn,
          filterManifestNameEq,
          filterManifestNameNotEq,
          filterParticipatorySpaceIdIn,
          filterParticipatorySpaceIdEq,
          filterParticipatorySpaceTypeIn,
          filterParticipatorySpaceTypeEq,
          filterNameStart,
          filterNameEq,
          filterNameNotEq,
          filterNameMatches,
          page,
          perPage,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PublicApi.apiRestFullV00PublicComponentsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Show a Component
     * @param {number} id
     * @param {Array<ApiRestFullV00PublicComponentsIdGetLocalesEnum>} [locales]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiRestFullV00PublicComponentsIdGet(
      id: number,
      locales?: Array<ApiRestFullV00PublicComponentsIdGetLocalesEnum>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ComponentResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiRestFullV00PublicComponentsIdGet(
          id,
          locales,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PublicApi.apiRestFullV00PublicComponentsIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary List Participatory Spaces
     * @param {Array<ApiRestFullV00PublicSpacesGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {Array<string>} [filterTitleNotIn]
     * @param {Array<string>} [filterTitleIn]
     * @param {string} [filterTitleStart]
     * @param {string} [filterTitleNotStart]
     * @param {string} [filterTitleEq]
     * @param {string} [filterTitleNotEq]
     * @param {string} [filterTitleMatches]
     * @param {string} [filterTitleDoesNotMatch]
     * @param {ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum} [filterTitlePresent]
     * @param {ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum} [filterTitleBlank]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiRestFullV00PublicSpacesGet(
      locales?: Array<ApiRestFullV00PublicSpacesGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterTitleNotIn?: Array<string>,
      filterTitleIn?: Array<string>,
      filterTitleStart?: string,
      filterTitleNotStart?: string,
      filterTitleEq?: string,
      filterTitleNotEq?: string,
      filterTitleMatches?: string,
      filterTitleDoesNotMatch?: string,
      filterTitlePresent?: ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum,
      filterTitleBlank?: ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpacesResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiRestFullV00PublicSpacesGet(
          locales,
          filterManifestNameNotIn,
          filterManifestNameIn,
          filterManifestNameEq,
          filterManifestNameNotEq,
          filterTitleNotIn,
          filterTitleIn,
          filterTitleStart,
          filterTitleNotStart,
          filterTitleEq,
          filterTitleNotEq,
          filterTitleMatches,
          filterTitleDoesNotMatch,
          filterTitlePresent,
          filterTitleBlank,
          page,
          perPage,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PublicApi.apiRestFullV00PublicSpacesGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PublicApiFp(configuration);
  return {
    /**
     *
     * @summary List Components
     * @param {Array<ApiRestFullV00PublicComponentsGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {Array<string>} [filterParticipatorySpaceIdIn]
     * @param {string} [filterParticipatorySpaceIdEq]
     * @param {Array<string>} [filterParticipatorySpaceTypeIn]
     * @param {string} [filterParticipatorySpaceTypeEq]
     * @param {string} [filterNameStart]
     * @param {string} [filterNameEq]
     * @param {string} [filterNameNotEq]
     * @param {string} [filterNameMatches]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00PublicComponentsGet(
      locales?: Array<ApiRestFullV00PublicComponentsGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterParticipatorySpaceIdIn?: Array<string>,
      filterParticipatorySpaceIdEq?: string,
      filterParticipatorySpaceTypeIn?: Array<string>,
      filterParticipatorySpaceTypeEq?: string,
      filterNameStart?: string,
      filterNameEq?: string,
      filterNameNotEq?: string,
      filterNameMatches?: string,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ComponentsResponse> {
      return localVarFp
        .apiRestFullV00PublicComponentsGet(
          locales,
          filterManifestNameNotIn,
          filterManifestNameIn,
          filterManifestNameEq,
          filterManifestNameNotEq,
          filterParticipatorySpaceIdIn,
          filterParticipatorySpaceIdEq,
          filterParticipatorySpaceTypeIn,
          filterParticipatorySpaceTypeEq,
          filterNameStart,
          filterNameEq,
          filterNameNotEq,
          filterNameMatches,
          page,
          perPage,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Show a Component
     * @param {number} id
     * @param {Array<ApiRestFullV00PublicComponentsIdGetLocalesEnum>} [locales]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00PublicComponentsIdGet(
      id: number,
      locales?: Array<ApiRestFullV00PublicComponentsIdGetLocalesEnum>,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ComponentResponse> {
      return localVarFp
        .apiRestFullV00PublicComponentsIdGet(id, locales, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List Participatory Spaces
     * @param {Array<ApiRestFullV00PublicSpacesGetLocalesEnum>} [locales]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {Array<string>} [filterTitleNotIn]
     * @param {Array<string>} [filterTitleIn]
     * @param {string} [filterTitleStart]
     * @param {string} [filterTitleNotStart]
     * @param {string} [filterTitleEq]
     * @param {string} [filterTitleNotEq]
     * @param {string} [filterTitleMatches]
     * @param {string} [filterTitleDoesNotMatch]
     * @param {ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum} [filterTitlePresent]
     * @param {ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum} [filterTitleBlank]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00PublicSpacesGet(
      locales?: Array<ApiRestFullV00PublicSpacesGetLocalesEnum>,
      filterManifestNameNotIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterTitleNotIn?: Array<string>,
      filterTitleIn?: Array<string>,
      filterTitleStart?: string,
      filterTitleNotStart?: string,
      filterTitleEq?: string,
      filterTitleNotEq?: string,
      filterTitleMatches?: string,
      filterTitleDoesNotMatch?: string,
      filterTitlePresent?: ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum,
      filterTitleBlank?: ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SpacesResponse> {
      return localVarFp
        .apiRestFullV00PublicSpacesGet(
          locales,
          filterManifestNameNotIn,
          filterManifestNameIn,
          filterManifestNameEq,
          filterManifestNameNotEq,
          filterTitleNotIn,
          filterTitleIn,
          filterTitleStart,
          filterTitleNotStart,
          filterTitleEq,
          filterTitleNotEq,
          filterTitleMatches,
          filterTitleDoesNotMatch,
          filterTitlePresent,
          filterTitleBlank,
          page,
          perPage,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
  /**
   *
   * @summary List Components
   * @param {Array<ApiRestFullV00PublicComponentsGetLocalesEnum>} [locales]
   * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
   * @param {Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>} [filterManifestNameIn]
   * @param {string} [filterManifestNameEq]
   * @param {string} [filterManifestNameNotEq]
   * @param {Array<string>} [filterParticipatorySpaceIdIn]
   * @param {string} [filterParticipatorySpaceIdEq]
   * @param {Array<string>} [filterParticipatorySpaceTypeIn]
   * @param {string} [filterParticipatorySpaceTypeEq]
   * @param {string} [filterNameStart]
   * @param {string} [filterNameEq]
   * @param {string} [filterNameNotEq]
   * @param {string} [filterNameMatches]
   * @param {number} [page] Page number for pagination
   * @param {number} [perPage] Number of items per page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public apiRestFullV00PublicComponentsGet(
    locales?: Array<ApiRestFullV00PublicComponentsGetLocalesEnum>,
    filterManifestNameNotIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum>,
    filterManifestNameIn?: Array<ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum>,
    filterManifestNameEq?: string,
    filterManifestNameNotEq?: string,
    filterParticipatorySpaceIdIn?: Array<string>,
    filterParticipatorySpaceIdEq?: string,
    filterParticipatorySpaceTypeIn?: Array<string>,
    filterParticipatorySpaceTypeEq?: string,
    filterNameStart?: string,
    filterNameEq?: string,
    filterNameNotEq?: string,
    filterNameMatches?: string,
    page?: number,
    perPage?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return PublicApiFp(this.configuration)
      .apiRestFullV00PublicComponentsGet(
        locales,
        filterManifestNameNotIn,
        filterManifestNameIn,
        filterManifestNameEq,
        filterManifestNameNotEq,
        filterParticipatorySpaceIdIn,
        filterParticipatorySpaceIdEq,
        filterParticipatorySpaceTypeIn,
        filterParticipatorySpaceTypeEq,
        filterNameStart,
        filterNameEq,
        filterNameNotEq,
        filterNameMatches,
        page,
        perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Show a Component
   * @param {number} id
   * @param {Array<ApiRestFullV00PublicComponentsIdGetLocalesEnum>} [locales]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public apiRestFullV00PublicComponentsIdGet(
    id: number,
    locales?: Array<ApiRestFullV00PublicComponentsIdGetLocalesEnum>,
    options?: RawAxiosRequestConfig,
  ) {
    return PublicApiFp(this.configuration)
      .apiRestFullV00PublicComponentsIdGet(id, locales, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List Participatory Spaces
   * @param {Array<ApiRestFullV00PublicSpacesGetLocalesEnum>} [locales]
   * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
   * @param {Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>} [filterManifestNameIn]
   * @param {string} [filterManifestNameEq]
   * @param {string} [filterManifestNameNotEq]
   * @param {Array<string>} [filterTitleNotIn]
   * @param {Array<string>} [filterTitleIn]
   * @param {string} [filterTitleStart]
   * @param {string} [filterTitleNotStart]
   * @param {string} [filterTitleEq]
   * @param {string} [filterTitleNotEq]
   * @param {string} [filterTitleMatches]
   * @param {string} [filterTitleDoesNotMatch]
   * @param {ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum} [filterTitlePresent]
   * @param {ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum} [filterTitleBlank]
   * @param {number} [page] Page number for pagination
   * @param {number} [perPage] Number of items per page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public apiRestFullV00PublicSpacesGet(
    locales?: Array<ApiRestFullV00PublicSpacesGetLocalesEnum>,
    filterManifestNameNotIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum>,
    filterManifestNameIn?: Array<ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum>,
    filterManifestNameEq?: string,
    filterManifestNameNotEq?: string,
    filterTitleNotIn?: Array<string>,
    filterTitleIn?: Array<string>,
    filterTitleStart?: string,
    filterTitleNotStart?: string,
    filterTitleEq?: string,
    filterTitleNotEq?: string,
    filterTitleMatches?: string,
    filterTitleDoesNotMatch?: string,
    filterTitlePresent?: ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum,
    filterTitleBlank?: ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum,
    page?: number,
    perPage?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return PublicApiFp(this.configuration)
      .apiRestFullV00PublicSpacesGet(
        locales,
        filterManifestNameNotIn,
        filterManifestNameIn,
        filterManifestNameEq,
        filterManifestNameNotEq,
        filterTitleNotIn,
        filterTitleIn,
        filterTitleStart,
        filterTitleNotStart,
        filterTitleEq,
        filterTitleNotEq,
        filterTitleMatches,
        filterTitleDoesNotMatch,
        filterTitlePresent,
        filterTitleBlank,
        page,
        perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ApiRestFullV00PublicComponentsGetLocalesEnum = {
  En: "en",
  Fr: "fr",
} as const;
export type ApiRestFullV00PublicComponentsGetLocalesEnum =
  (typeof ApiRestFullV00PublicComponentsGetLocalesEnum)[keyof typeof ApiRestFullV00PublicComponentsGetLocalesEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum = {
  Pages: "pages",
  Proposals: "proposals",
  Meetings: "meetings",
  Budgets: "budgets",
  Surveys: "surveys",
  Accountability: "accountability",
  Debates: "debates",
  Sortitions: "sortitions",
  Blogs: "blogs",
} as const;
export type ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum =
  (typeof ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum)[keyof typeof ApiRestFullV00PublicComponentsGetFilterManifestNameNotInEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum = {
  Pages: "pages",
  Proposals: "proposals",
  Meetings: "meetings",
  Budgets: "budgets",
  Surveys: "surveys",
  Accountability: "accountability",
  Debates: "debates",
  Sortitions: "sortitions",
  Blogs: "blogs",
} as const;
export type ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum =
  (typeof ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum)[keyof typeof ApiRestFullV00PublicComponentsGetFilterManifestNameInEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicComponentsIdGetLocalesEnum = {
  En: "en",
  Fr: "fr",
} as const;
export type ApiRestFullV00PublicComponentsIdGetLocalesEnum =
  (typeof ApiRestFullV00PublicComponentsIdGetLocalesEnum)[keyof typeof ApiRestFullV00PublicComponentsIdGetLocalesEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicSpacesGetLocalesEnum = {
  En: "en",
  Fr: "fr",
} as const;
export type ApiRestFullV00PublicSpacesGetLocalesEnum =
  (typeof ApiRestFullV00PublicSpacesGetLocalesEnum)[keyof typeof ApiRestFullV00PublicSpacesGetLocalesEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;
export type ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum =
  (typeof ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum)[keyof typeof ApiRestFullV00PublicSpacesGetFilterManifestNameNotInEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;
export type ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum =
  (typeof ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum)[keyof typeof ApiRestFullV00PublicSpacesGetFilterManifestNameInEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum = {
  _1: "1",
  _0: "0",
} as const;
export type ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum =
  (typeof ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum)[keyof typeof ApiRestFullV00PublicSpacesGetFilterTitlePresentEnum];
/**
 * @export
 */
export const ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum = {
  _1: "1",
  _0: "0",
} as const;
export type ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum =
  (typeof ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum)[keyof typeof ApiRestFullV00PublicSpacesGetFilterTitleBlankEnum];

/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary List available organizations
     * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate]
     * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00SystemOrganizationsGet: async (
      populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>,
      locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>,
      page?: number,
      perPage?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rest_full/v0.0/system/organizations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (populate) {
        localVarQueryParameter["populate[]"] = populate;
      }

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary List available organizations
     * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate]
     * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiRestFullV00SystemOrganizationsGet(
      populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>,
      locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<OrganizationsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiRestFullV00SystemOrganizationsGet(
          populate,
          locales,
          page,
          perPage,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SystemApi.apiRestFullV00SystemOrganizationsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SystemApiFp(configuration);
  return {
    /**
     *
     * @summary List available organizations
     * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate]
     * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRestFullV00SystemOrganizationsGet(
      populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>,
      locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationsResponse> {
      return localVarFp
        .apiRestFullV00SystemOrganizationsGet(
          populate,
          locales,
          page,
          perPage,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
  /**
   *
   * @summary List available organizations
   * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate]
   * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales]
   * @param {number} [page] Page number for pagination
   * @param {number} [perPage] Number of items per page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public apiRestFullV00SystemOrganizationsGet(
    populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>,
    locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>,
    page?: number,
    perPage?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return SystemApiFp(this.configuration)
      .apiRestFullV00SystemOrganizationsGet(
        populate,
        locales,
        page,
        perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ApiRestFullV00SystemOrganizationsGetPopulateEnum = {
  Host: "host",
  SecondaryHosts: "secondary_hosts",
  Name: "name",
  CreatedAt: "created_at",
  UpdatedAt: "updated_at",
} as const;
export type ApiRestFullV00SystemOrganizationsGetPopulateEnum =
  (typeof ApiRestFullV00SystemOrganizationsGetPopulateEnum)[keyof typeof ApiRestFullV00SystemOrganizationsGetPopulateEnum];
/**
 * @export
 */
export const ApiRestFullV00SystemOrganizationsGetLocalesEnum = {
  En: "en",
  Fr: "fr",
} as const;
export type ApiRestFullV00SystemOrganizationsGetLocalesEnum =
  (typeof ApiRestFullV00SystemOrganizationsGetLocalesEnum)[keyof typeof ApiRestFullV00SystemOrganizationsGetLocalesEnum];
