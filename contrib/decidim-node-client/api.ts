/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * A RestFull API for Decidim, to be able to CRUD resources from Decidim.  ## Authentication [Get a token](https://octree-gva.github.io/decidim-rest-full/category/authentication) from our `/oauth/token` routes,  following OAuth specs on Credential Flows or Resource Owner Password Credentials Flow.  ### Permissions A permission system is attached to the created OAuth application, that is designed in two levels:   - **scope**: a broad permission to access a collection of endpoints - **abilities**: a fine grained permission system that allow actions.   The scopes and abilities are manageable in your System Admin Panel.  ### Multi-tenant Decidim is multi-tenant, and this API supports it. - The **`system` scope** endpoints are available in any tenant - The tenant `host` attribute will be used to guess which tenant you are requesting.    For example, given a tenant `example.org` and `foobar.org`, the endpoint   * `example.org/oauth/token` will ask a token for the example.org organization   * `foobar.org/oauth/token` for foobar.org.
 *
 * The version of the OpenAPI document: v0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface ApiError
 */
export interface ApiError {
  /**
   * Error title, starting with HTTP Code, like 400: bad request
   * @type {string}
   * @memberof ApiError
   */
  error: string;
  /**
   * Error detail, mostly validation error
   * @type {string}
   * @memberof ApiError
   */
  error_description: string;
}
/**
 *
 * @export
 * @interface AttachedComponents
 */
export interface AttachedComponents {
  /**
   *
   * @type {Array<AttachedComponentsDataInner>}
   * @memberof AttachedComponents
   */
  data: Array<AttachedComponentsDataInner>;
  /**
   *
   * @type {AttachedComponentsMeta}
   * @memberof AttachedComponents
   */
  meta: AttachedComponentsMeta;
  /**
   *
   * @type {AttachedComponentsLinks}
   * @memberof AttachedComponents
   */
  links: AttachedComponentsLinks;
}
/**
 *
 * @export
 * @interface AttachedComponentsDataInner
 */
export interface AttachedComponentsDataInner {
  /**
   *
   * @type {string}
   * @memberof AttachedComponentsDataInner
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof AttachedComponentsDataInner
   */
  type: AttachedComponentsDataInnerTypeEnum;
}

export const AttachedComponentsDataInnerTypeEnum = {
  PageComponent: "page_component",
  ProposalComponent: "proposal_component",
  MeetingComponent: "meeting_component",
  BudgetComponent: "budget_component",
  SurveyComponent: "survey_component",
  AccountabilityComponent: "accountability_component",
  DebateComponent: "debate_component",
  SortitionComponent: "sortition_component",
  BlogComponent: "blog_component",
} as const;

export type AttachedComponentsDataInnerTypeEnum =
  (typeof AttachedComponentsDataInnerTypeEnum)[keyof typeof AttachedComponentsDataInnerTypeEnum];

/**
 *
 * @export
 * @interface AttachedComponentsLinks
 */
export interface AttachedComponentsLinks {
  /**
   * Complete list
   * @type {string}
   * @memberof AttachedComponentsLinks
   */
  related: string;
}
/**
 *
 * @export
 * @interface AttachedComponentsMeta
 */
export interface AttachedComponentsMeta {
  /**
   * Total count for components association
   * @type {number}
   * @memberof AttachedComponentsMeta
   */
  count: number;
}
/**
 *
 * @export
 * @interface ClientCredential
 */
export interface ClientCredential {
  /**
   * Client Credential Flow, for **machine-to-machine**
   * @type {string}
   * @memberof ClientCredential
   */
  grant_type: ClientCredentialGrantTypeEnum;
  /**
   * OAuth application Client Id
   * @type {string}
   * @memberof ClientCredential
   */
  client_id: string;
  /**
   * OAuth application Client Secret
   * @type {string}
   * @memberof ClientCredential
   */
  client_secret: string;
  /**
   * Requested scopes
   * @type {string}
   * @memberof ClientCredential
   */
  scope: ClientCredentialScopeEnum;
}

export const ClientCredentialGrantTypeEnum = {
  ClientCredentials: "client_credentials",
} as const;

export type ClientCredentialGrantTypeEnum =
  (typeof ClientCredentialGrantTypeEnum)[keyof typeof ClientCredentialGrantTypeEnum];
export const ClientCredentialScopeEnum = {
  Public: "public",
  Spaces: "spaces",
  System: "system",
  Proposals: "proposals",
  Meetings: "meetings",
  Debates: "debates",
  Pages: "pages",
} as const;

export type ClientCredentialScopeEnum =
  (typeof ClientCredentialScopeEnum)[keyof typeof ClientCredentialScopeEnum];

/**
 *
 * @export
 * @interface Component
 */
export interface Component {
  /**
   * Component Id
   * @type {string}
   * @memberof Component
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Component
   */
  type: ComponentTypeEnum;
  /**
   *
   * @type {ComponentAttributes}
   * @memberof Component
   */
  attributes: ComponentAttributes;
  /**
   *
   * @type {ComponentMetadata}
   * @memberof Component
   */
  meta: ComponentMetadata;
  /**
   *
   * @type {ComponentLinks}
   * @memberof Component
   */
  links: ComponentLinks;
  /**
   *
   * @type {ComponentRelationships}
   * @memberof Component
   */
  relationships?: ComponentRelationships;
}

export const ComponentTypeEnum = {
  PageComponent: "page_component",
  ProposalComponent: "proposal_component",
  MeetingComponent: "meeting_component",
  BudgetComponent: "budget_component",
  SurveyComponent: "survey_component",
  AccountabilityComponent: "accountability_component",
  DebateComponent: "debate_component",
  SortitionComponent: "sortition_component",
  BlogComponent: "blog_component",
} as const;

export type ComponentTypeEnum =
  (typeof ComponentTypeEnum)[keyof typeof ComponentTypeEnum];

/**
 *
 * @export
 * @interface ComponentAttributes
 */
export interface ComponentAttributes {
  /**
   *
   * @type {TranslatedProp}
   * @memberof ComponentAttributes
   */
  name: TranslatedProp;
  /**
   *
   * @type {TranslatedProp}
   * @memberof ComponentAttributes
   */
  global_announcement?: TranslatedProp;
  /**
   * Manifest name of the component
   * @type {string}
   * @memberof ComponentAttributes
   */
  manifest_name: ComponentAttributesManifestNameEnum;
  /**
   * Associate space class name. Part of the polymorphic association (participatory_space_type,participatory_space_id)
   * @type {string}
   * @memberof ComponentAttributes
   */
  participatory_space_type: string;
  /**
   * Associate space id. Part of the polymorphic association (participatory_space_type,participatory_space_id)
   * @type {string}
   * @memberof ComponentAttributes
   */
  participatory_space_id: string;
  /**
   * Creation date of the component
   * @type {string}
   * @memberof ComponentAttributes
   */
  created_at: string;
  /**
   * Last update date of the component
   * @type {string}
   * @memberof ComponentAttributes
   */
  updated_at: string;
}

export const ComponentAttributesManifestNameEnum = {
  Pages: "pages",
  Proposals: "proposals",
  Meetings: "meetings",
  Budgets: "budgets",
  Surveys: "surveys",
  Accountability: "accountability",
  Debates: "debates",
  Sortitions: "sortitions",
  Blogs: "blogs",
} as const;

export type ComponentAttributesManifestNameEnum =
  (typeof ComponentAttributesManifestNameEnum)[keyof typeof ComponentAttributesManifestNameEnum];

/**
 *
 * @export
 * @interface ComponentLinks
 */
export interface ComponentLinks {
  /**
   * API URL to the component
   * @type {string}
   * @memberof ComponentLinks
   */
  self: string;
  /**
   * Component details API URL
   * @type {string}
   * @memberof ComponentLinks
   */
  related: string;
}
/**
 *
 * @export
 * @interface ComponentMetadata
 */
export interface ComponentMetadata {
  [key: string]: ComponentMetadataValue | any;

  /**
   * Published component?
   * @type {boolean}
   * @memberof ComponentMetadata
   */
  published: boolean;
  /**
   * Component handle scopes?
   * @type {boolean}
   * @memberof ComponentMetadata
   */
  scopes_enabled: boolean;
}
/**
 * @type ComponentMetadataValue
 * @export
 */
export type ComponentMetadataValue = TranslatedProp | boolean | number | string;

/**
 *
 * @export
 * @interface ComponentRelationships
 */
export interface ComponentRelationships {
  /**
   *
   * @type {ComponentResourcesDescriptor}
   * @memberof ComponentRelationships
   */
  resources: ComponentResourcesDescriptor;
}
/**
 *
 * @export
 * @interface ComponentResource
 */
export interface ComponentResource {
  /**
   * Resource ID
   * @type {string}
   * @memberof ComponentResource
   */
  id: string;
  /**
   * Resource Type
   * @type {string}
   * @memberof ComponentResource
   */
  type: string;
}
/**
 *
 * @export
 * @interface ComponentResourceDescriptorMeta
 */
export interface ComponentResourceDescriptorMeta {
  /**
   * Total count of resources
   * @type {number}
   * @memberof ComponentResourceDescriptorMeta
   */
  count: number;
}
/**
 *
 * @export
 * @interface ComponentResourcesDescriptor
 */
export interface ComponentResourcesDescriptor {
  /**
   *
   * @type {Array<ComponentResource>}
   * @memberof ComponentResourcesDescriptor
   */
  data: Array<ComponentResource>;
  /**
   *
   * @type {ComponentResourceDescriptorMeta}
   * @memberof ComponentResourcesDescriptor
   */
  meta: ComponentResourceDescriptorMeta;
}
/**
 *
 * @export
 * @interface ComponentResponse
 */
export interface ComponentResponse {
  /**
   *
   * @type {Component}
   * @memberof ComponentResponse
   */
  data: Component;
}
/**
 *
 * @export
 * @interface ComponentsResponse
 */
export interface ComponentsResponse {
  /**
   *
   * @type {Array<Component>}
   * @memberof ComponentsResponse
   */
  data: Array<Component>;
}
/**
 *
 * @export
 * @interface Impersonation
 */
export interface Impersonation {
  /**
   * Resource Owner Password Credentials (ROPC) Flow, for **user impersonation**
   * @type {string}
   * @memberof Impersonation
   */
  grant_type: ImpersonationGrantTypeEnum;
  /**
   * Type of ROPC
   * @type {string}
   * @memberof Impersonation
   */
  auth_type: ImpersonationAuthTypeEnum;
  /**
   * User nickname, unique and at least 6 alphanumeric chars.
   * @type {string}
   * @memberof Impersonation
   */
  username?: string;
  /**
   * User id, will find over id and ignore username. Fails if register_on_missing=true.
   * @type {string}
   * @memberof Impersonation
   */
  id?: string;
  /**
   * Additional properties for the user (private)
   * @type {{ [key: string]: string; }}
   * @memberof Impersonation
   */
  extra?: { [key: string]: string };
  /**
   *
   * @type {UserImpersonationSettings}
   * @memberof Impersonation
   */
  meta?: UserImpersonationSettings;
  /**
   * OAuth application Client Id
   * @type {string}
   * @memberof Impersonation
   */
  client_id: string;
  /**
   * OAuth application Client Secret
   * @type {string}
   * @memberof Impersonation
   */
  client_secret: string;
  /**
   * Request scopes
   * @type {string}
   * @memberof Impersonation
   */
  scope: ImpersonationScopeEnum;
}

export const ImpersonationGrantTypeEnum = {
  Password: "password",
} as const;

export type ImpersonationGrantTypeEnum =
  (typeof ImpersonationGrantTypeEnum)[keyof typeof ImpersonationGrantTypeEnum];
export const ImpersonationAuthTypeEnum = {
  Impersonate: "impersonate",
} as const;

export type ImpersonationAuthTypeEnum =
  (typeof ImpersonationAuthTypeEnum)[keyof typeof ImpersonationAuthTypeEnum];
export const ImpersonationScopeEnum = {
  Public: "public",
  Spaces: "spaces",
  Proposals: "proposals",
  Meetings: "meetings",
  Debates: "debates",
  Pages: "pages",
} as const;

export type ImpersonationScopeEnum =
  (typeof ImpersonationScopeEnum)[keyof typeof ImpersonationScopeEnum];

/**
 *
 * @export
 * @interface IntrospectData
 */
export interface IntrospectData {
  /**
   * Access token id
   * @type {number}
   * @memberof IntrospectData
   */
  sub: number;
  /**
   * If the token can be used
   * @type {boolean}
   * @memberof IntrospectData
   */
  active: boolean;
  /**
   *
   * @type {IntrospectDataResource}
   * @memberof IntrospectData
   */
  resource?: IntrospectDataResource;
}
/**
 *
 * @export
 * @interface IntrospectDataResource
 */
export interface IntrospectDataResource {
  /**
   * resource id
   * @type {string}
   * @memberof IntrospectDataResource
   */
  id: string;
  /**
   * resource type
   * @type {string}
   * @memberof IntrospectDataResource
   */
  type: IntrospectDataResourceTypeEnum;
  /**
   *
   * @type {object}
   * @memberof IntrospectDataResource
   */
  attributes?: object;
}

export const IntrospectDataResourceTypeEnum = {
  User: "user",
} as const;

export type IntrospectDataResourceTypeEnum =
  (typeof IntrospectDataResourceTypeEnum)[keyof typeof IntrospectDataResourceTypeEnum];

/**
 * Details about the token beeing used
 * @export
 * @interface IntrospectResponse
 */
export interface IntrospectResponse {
  /**
   *
   * @type {IntrospectData}
   * @memberof IntrospectResponse
   */
  data: IntrospectData;
}
/**
 *
 * @export
 * @interface Login
 */
export interface Login {
  /**
   * Resource Owner Password Credentials (ROPC) Flow, for **user login**
   * @type {string}
   * @memberof Login
   */
  grant_type: LoginGrantTypeEnum;
  /**
   * Type of ROPC
   * @type {string}
   * @memberof Login
   */
  auth_type: LoginAuthTypeEnum;
  /**
   * User nickname
   * @type {string}
   * @memberof Login
   */
  username: string;
  /**
   * User password
   * @type {string}
   * @memberof Login
   */
  password: string;
  /**
   * OAuth application Client Id
   * @type {string}
   * @memberof Login
   */
  client_id: string;
  /**
   * OAuth application Client Secret
   * @type {string}
   * @memberof Login
   */
  client_secret: string;
  /**
   * Request scopes
   * @type {string}
   * @memberof Login
   */
  scope: LoginScopeEnum;
}

export const LoginGrantTypeEnum = {
  Password: "password",
} as const;

export type LoginGrantTypeEnum =
  (typeof LoginGrantTypeEnum)[keyof typeof LoginGrantTypeEnum];
export const LoginAuthTypeEnum = {
  Login: "login",
} as const;

export type LoginAuthTypeEnum =
  (typeof LoginAuthTypeEnum)[keyof typeof LoginAuthTypeEnum];
export const LoginScopeEnum = {
  Public: "public",
  Spaces: "spaces",
  Proposals: "proposals",
  Meetings: "meetings",
  Debates: "debates",
  Pages: "pages",
} as const;

export type LoginScopeEnum =
  (typeof LoginScopeEnum)[keyof typeof LoginScopeEnum];

/**
 * @type OauthGrantParam
 * @export
 */
export type OauthGrantParam = ClientCredential | Impersonation | Login;

/**
 *
 * @export
 * @interface Organization
 */
export interface Organization {
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  type: OrganizationTypeEnum;
  /**
   *
   * @type {OrganizationAttributes}
   * @memberof Organization
   */
  attributes: OrganizationAttributes;
  /**
   *
   * @type {OrganizationMeta}
   * @memberof Organization
   */
  meta: OrganizationMeta;
}

export const OrganizationTypeEnum = {
  Organization: "organization",
} as const;

export type OrganizationTypeEnum =
  (typeof OrganizationTypeEnum)[keyof typeof OrganizationTypeEnum];

/**
 *
 * @export
 * @interface OrganizationAttributes
 */
export interface OrganizationAttributes {
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof OrganizationAttributes
   */
  name?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof OrganizationAttributes
   */
  host?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof OrganizationAttributes
   */
  secondary_hosts?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof OrganizationAttributes
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationAttributes
   */
  updated_at: string;
}
/**
 *
 * @export
 * @interface OrganizationMeta
 */
export interface OrganizationMeta {
  /**
   *
   * @type {Array<string>}
   * @memberof OrganizationMeta
   */
  locales: Array<string>;
}
/**
 *
 * @export
 * @interface OrganizationsResponse
 */
export interface OrganizationsResponse {
  /**
   *
   * @type {Array<Organization>}
   * @memberof OrganizationsResponse
   */
  data: Array<Organization>;
}
/**
 * @type PasswordGrantParam
 * @export
 */
export type PasswordGrantParam = Impersonation | Login;

/**
 *
 * @export
 * @interface Space
 */
export interface Space {
  /**
   * Space Id
   * @type {string}
   * @memberof Space
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Space
   */
  type: SpaceTypeEnum;
  /**
   *
   * @type {SpaceAttributes}
   * @memberof Space
   */
  attributes: SpaceAttributes;
  /**
   *
   * @type {SpaceRelationships}
   * @memberof Space
   */
  relationships: SpaceRelationships;
  /**
   *
   * @type {SpaceLinks}
   * @memberof Space
   */
  links: SpaceLinks;
}

export const SpaceTypeEnum = {
  Space: "space",
} as const;

export type SpaceTypeEnum = (typeof SpaceTypeEnum)[keyof typeof SpaceTypeEnum];

/**
 *
 * @export
 * @interface SpaceAttributes
 */
export interface SpaceAttributes {
  /**
   *
   * @type {TranslatedProp}
   * @memberof SpaceAttributes
   */
  title: TranslatedProp;
  /**
   *
   * @type {TranslatedProp}
   * @memberof SpaceAttributes
   */
  subtitle?: TranslatedProp;
  /**
   *
   * @type {TranslatedProp}
   * @memberof SpaceAttributes
   */
  short_description?: TranslatedProp;
  /**
   *
   * @type {TranslatedProp}
   * @memberof SpaceAttributes
   */
  description?: TranslatedProp;
  /**
   *
   * @type {string}
   * @memberof SpaceAttributes
   */
  manifest_name: SpaceAttributesManifestNameEnum;
  /**
   *
   * @type {string}
   * @memberof SpaceAttributes
   */
  participatory_space_type?: string;
  /**
   * Space visibility
   * @type {string}
   * @memberof SpaceAttributes
   */
  visibility: SpaceAttributesVisibilityEnum;
  /**
   * Space creation date
   * @type {string}
   * @memberof SpaceAttributes
   */
  created_at: string;
  /**
   * Last update of the space
   * @type {string}
   * @memberof SpaceAttributes
   */
  updated_at: string;
}

export const SpaceAttributesManifestNameEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;

export type SpaceAttributesManifestNameEnum =
  (typeof SpaceAttributesManifestNameEnum)[keyof typeof SpaceAttributesManifestNameEnum];
export const SpaceAttributesVisibilityEnum = {
  Public: "public",
  Transparent: "transparent",
  Private: "private",
} as const;

export type SpaceAttributesVisibilityEnum =
  (typeof SpaceAttributesVisibilityEnum)[keyof typeof SpaceAttributesVisibilityEnum];

/**
 *
 * @export
 * @interface SpaceLinks
 */
export interface SpaceLinks {
  /**
   *
   * @type {string}
   * @memberof SpaceLinks
   */
  self: string;
}
/**
 *
 * @export
 * @interface SpaceRelationships
 */
export interface SpaceRelationships {
  /**
   *
   * @type {AttachedComponents}
   * @memberof SpaceRelationships
   */
  components: AttachedComponents;
}
/**
 * Definition of one specific space
 * @export
 * @interface SpaceResponse
 */
export interface SpaceResponse {
  /**
   *
   * @type {Space}
   * @memberof SpaceResponse
   */
  data: Space;
}
/**
 * List of spaces
 * @export
 * @interface SpacesResponse
 */
export interface SpacesResponse {
  /**
   *
   * @type {Array<Space>}
   * @memberof SpacesResponse
   */
  data: Array<Space>;
}
/**
 * Hash with translated data, key=locale value=translation
 * @export
 * @interface TranslatedProp
 */
export interface TranslatedProp {
  /**
   * Translation in en
   * @type {string}
   * @memberof TranslatedProp
   */
  en?: string;
  /**
   * Translation in bg
   * @type {string}
   * @memberof TranslatedProp
   */
  bg?: string;
  /**
   * Translation in ar
   * @type {string}
   * @memberof TranslatedProp
   */
  ar?: string;
  /**
   * Translation in ca
   * @type {string}
   * @memberof TranslatedProp
   */
  ca?: string;
  /**
   * Translation in cs
   * @type {string}
   * @memberof TranslatedProp
   */
  cs?: string;
  /**
   * Translation in da
   * @type {string}
   * @memberof TranslatedProp
   */
  da?: string;
  /**
   * Translation in de
   * @type {string}
   * @memberof TranslatedProp
   */
  de?: string;
  /**
   * Translation in el
   * @type {string}
   * @memberof TranslatedProp
   */
  el?: string;
  /**
   * Translation in eo
   * @type {string}
   * @memberof TranslatedProp
   */
  eo?: string;
  /**
   * Translation in es
   * @type {string}
   * @memberof TranslatedProp
   */
  es?: string;
  /**
   * Translation in es-MX
   * @type {string}
   * @memberof TranslatedProp
   */
  "es-MX"?: string;
  /**
   * Translation in es-PY
   * @type {string}
   * @memberof TranslatedProp
   */
  "es-PY"?: string;
  /**
   * Translation in et
   * @type {string}
   * @memberof TranslatedProp
   */
  et?: string;
  /**
   * Translation in eu
   * @type {string}
   * @memberof TranslatedProp
   */
  eu?: string;
  /**
   * Translation in fa
   * @type {string}
   * @memberof TranslatedProp
   */
  fa?: string;
  /**
   * Translation in fi-pl
   * @type {string}
   * @memberof TranslatedProp
   */
  "fi-pl"?: string;
  /**
   * Translation in fi
   * @type {string}
   * @memberof TranslatedProp
   */
  fi?: string;
  /**
   * Translation in fr
   * @type {string}
   * @memberof TranslatedProp
   */
  fr?: string;
  /**
   * Translation in fr-CA
   * @type {string}
   * @memberof TranslatedProp
   */
  "fr-CA"?: string;
  /**
   * Translation in ga
   * @type {string}
   * @memberof TranslatedProp
   */
  ga?: string;
  /**
   * Translation in gl
   * @type {string}
   * @memberof TranslatedProp
   */
  gl?: string;
  /**
   * Translation in hr
   * @type {string}
   * @memberof TranslatedProp
   */
  hr?: string;
  /**
   * Translation in hu
   * @type {string}
   * @memberof TranslatedProp
   */
  hu?: string;
  /**
   * Translation in id
   * @type {string}
   * @memberof TranslatedProp
   */
  id?: string;
  /**
   * Translation in is
   * @type {string}
   * @memberof TranslatedProp
   */
  is?: string;
  /**
   * Translation in it
   * @type {string}
   * @memberof TranslatedProp
   */
  it?: string;
  /**
   * Translation in ja
   * @type {string}
   * @memberof TranslatedProp
   */
  ja?: string;
  /**
   * Translation in ko
   * @type {string}
   * @memberof TranslatedProp
   */
  ko?: string;
  /**
   * Translation in lb
   * @type {string}
   * @memberof TranslatedProp
   */
  lb?: string;
  /**
   * Translation in lt
   * @type {string}
   * @memberof TranslatedProp
   */
  lt?: string;
  /**
   * Translation in lv
   * @type {string}
   * @memberof TranslatedProp
   */
  lv?: string;
  /**
   * Translation in mt
   * @type {string}
   * @memberof TranslatedProp
   */
  mt?: string;
  /**
   * Translation in nl
   * @type {string}
   * @memberof TranslatedProp
   */
  nl?: string;
  /**
   * Translation in no
   * @type {string}
   * @memberof TranslatedProp
   */
  no?: string;
  /**
   * Translation in pl
   * @type {string}
   * @memberof TranslatedProp
   */
  pl?: string;
  /**
   * Translation in pt
   * @type {string}
   * @memberof TranslatedProp
   */
  pt?: string;
  /**
   * Translation in pt-BR
   * @type {string}
   * @memberof TranslatedProp
   */
  "pt-BR"?: string;
  /**
   * Translation in ro
   * @type {string}
   * @memberof TranslatedProp
   */
  ro?: string;
  /**
   * Translation in ru
   * @type {string}
   * @memberof TranslatedProp
   */
  ru?: string;
  /**
   * Translation in sk
   * @type {string}
   * @memberof TranslatedProp
   */
  sk?: string;
  /**
   * Translation in sl
   * @type {string}
   * @memberof TranslatedProp
   */
  sl?: string;
  /**
   * Translation in sr
   * @type {string}
   * @memberof TranslatedProp
   */
  sr?: string;
  /**
   * Translation in sv
   * @type {string}
   * @memberof TranslatedProp
   */
  sv?: string;
  /**
   * Translation in tr
   * @type {string}
   * @memberof TranslatedProp
   */
  tr?: string;
  /**
   * Translation in uk
   * @type {string}
   * @memberof TranslatedProp
   */
  uk?: string;
  /**
   * Translation in vi
   * @type {string}
   * @memberof TranslatedProp
   */
  vi?: string;
  /**
   * Translation in zh-CN
   * @type {string}
   * @memberof TranslatedProp
   */
  "zh-CN"?: string;
  /**
   * Translation in zh-TW
   * @type {string}
   * @memberof TranslatedProp
   */
  "zh-TW"?: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  type: UserTypeEnum;
  /**
   *
   * @type {UserMeta}
   * @memberof User
   */
  meta?: UserMeta;
  /**
   *
   * @type {UserRelationships}
   * @memberof User
   */
  relationships?: UserRelationships;
  /**
   *
   * @type {UserAttributes}
   * @memberof User
   */
  attributes: UserAttributes;
}

export const UserTypeEnum = {
  User: "user",
} as const;

export type UserTypeEnum = (typeof UserTypeEnum)[keyof typeof UserTypeEnum];

/**
 *
 * @export
 * @interface UserAttributes
 */
export interface UserAttributes {
  /**
   * User name, use to display the Profile identity. Public
   * @type {string}
   * @memberof UserAttributes
   */
  name: string;
  /**
   * User nickname, unique identifier for the user. Public
   * @type {string}
   * @memberof UserAttributes
   */
  nickname: string;
  /**
   * Personal website URL or social link. Public
   * @type {string}
   * @memberof UserAttributes
   */
  personal_url?: string;
  /**
   * Short bio of the user. Public
   * @type {string}
   * @memberof UserAttributes
   */
  about?: string;
  /**
   * User locale. Fallback to default locale of the organization. Private
   * @type {string}
   * @memberof UserAttributes
   */
  locale: UserAttributesLocaleEnum;
  /**
   * Email of the user. Private
   * @type {string}
   * @memberof UserAttributes
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UserAttributes
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof UserAttributes
   */
  updated_at: string;
}

export const UserAttributesLocaleEnum = {
  En: "en",
  Bg: "bg",
  Ar: "ar",
  Ca: "ca",
  Cs: "cs",
  Da: "da",
  De: "de",
  El: "el",
  Eo: "eo",
  Es: "es",
  EsMx: "es-MX",
  EsPy: "es-PY",
  Et: "et",
  Eu: "eu",
  Fa: "fa",
  FiPl: "fi-pl",
  Fi: "fi",
  Fr: "fr",
  FrCa: "fr-CA",
  Ga: "ga",
  Gl: "gl",
  Hr: "hr",
  Hu: "hu",
  Id: "id",
  Is: "is",
  It: "it",
  Ja: "ja",
  Ko: "ko",
  Lb: "lb",
  Lt: "lt",
  Lv: "lv",
  Mt: "mt",
  Nl: "nl",
  No: "no",
  Pl: "pl",
  Pt: "pt",
  PtBr: "pt-BR",
  Ro: "ro",
  Ru: "ru",
  Sk: "sk",
  Sl: "sl",
  Sr: "sr",
  Sv: "sv",
  Tr: "tr",
  Uk: "uk",
  Vi: "vi",
  ZhCn: "zh-CN",
  ZhTw: "zh-TW",
} as const;

export type UserAttributesLocaleEnum =
  (typeof UserAttributesLocaleEnum)[keyof typeof UserAttributesLocaleEnum];

/**
 * Impersonation Settings
 * @export
 * @interface UserImpersonationSettings
 */
export interface UserImpersonationSettings {
  /**
   * Register the user if it does not exists. Default: false
   * @type {boolean}
   * @memberof UserImpersonationSettings
   */
  register_on_missing?: boolean;
  /**
   * Accept the TOS on registration, used only if register_on_missing=true. Default: false
   * @type {boolean}
   * @memberof UserImpersonationSettings
   */
  accept_tos_on_register?: boolean;
  /**
   * Skip email confirmation on creation, used only if register_on_missing=true. Default: false
   * @type {boolean}
   * @memberof UserImpersonationSettings
   */
  skip_confirmation_on_register?: boolean;
  /**
   * User email to use on registration. used only if register_on_missing=true. Default to <username>@example.org
   * @type {string}
   * @memberof UserImpersonationSettings
   */
  email?: string;
  /**
   * User name. Used only if register_on_missing=true. Default to username
   * @type {string}
   * @memberof UserImpersonationSettings
   */
  name?: string;
}
/**
 *
 * @export
 * @interface UserMeta
 */
export interface UserMeta {
  [key: string]: UserMetaValue | any;

  /**
   * If the user is blocked, and need to be unblocked to signin
   * @type {boolean}
   * @memberof UserMeta
   */
  blocked: boolean;
  /**
   * If the user is locked, and need to click on the mail link to unlock
   * @type {boolean}
   * @memberof UserMeta
   */
  locked: boolean;
}
/**
 * @type UserMetaValue
 * @export
 */
export type UserMetaValue = boolean | string;

/**
 *
 * @export
 * @interface UserRelationships
 */
export interface UserRelationships {
  /**
   *
   * @type {UserRelationshipsRoles}
   * @memberof UserRelationships
   */
  roles?: UserRelationshipsRoles;
}
/**
 *
 * @export
 * @interface UserRelationshipsRoles
 */
export interface UserRelationshipsRoles {
  /**
   *
   * @type {Array<UserRelationshipsRolesDataInner>}
   * @memberof UserRelationshipsRoles
   */
  data: Array<UserRelationshipsRolesDataInner>;
}
/**
 *
 * @export
 * @interface UserRelationshipsRolesDataInner
 */
export interface UserRelationshipsRolesDataInner {
  /**
   *
   * @type {string}
   * @memberof UserRelationshipsRolesDataInner
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof UserRelationshipsRolesDataInner
   */
  type: UserRelationshipsRolesDataInnerTypeEnum;
}

export const UserRelationshipsRolesDataInnerTypeEnum = {
  UserRole: "user_role",
} as const;

export type UserRelationshipsRolesDataInnerTypeEnum =
  (typeof UserRelationshipsRolesDataInnerTypeEnum)[keyof typeof UserRelationshipsRolesDataInnerTypeEnum];

/**
 *
 * @export
 * @interface UsersResponse
 */
export interface UsersResponse {
  /**
   *
   * @type {Array<User>}
   * @memberof UsersResponse
   */
  data: Array<User>;
}

/**
 * OAuthApi - axios parameter creator
 * @export
 */
export const OAuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Introspect a OAuth token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthIntrospectPost: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/oauth/introspect`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication resourceOwnerFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Request a OAuth token throught ROPC
     * @param {OauthGrantParam} oauthGrantParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthTokenPost: async (
      oauthGrantParam: OauthGrantParam,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'oauthGrantParam' is not null or undefined
      assertParamExists("oauthTokenPost", "oauthGrantParam", oauthGrantParam);
      const localVarPath = `/oauth/token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oauthGrantParam,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OAuthApi - functional programming interface
 * @export
 */
export const OAuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OAuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Introspect a OAuth token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oauthIntrospectPost(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<IntrospectResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.oauthIntrospectPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OAuthApi.oauthIntrospectPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Request a OAuth token throught ROPC
     * @param {OauthGrantParam} oauthGrantParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oauthTokenPost(
      oauthGrantParam: OauthGrantParam,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.oauthTokenPost(
        oauthGrantParam,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OAuthApi.oauthTokenPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OAuthApi - factory interface
 * @export
 */
export const OAuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OAuthApiFp(configuration);
  return {
    /**
     *
     * @summary Introspect a OAuth token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthIntrospectPost(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<IntrospectResponse> {
      return localVarFp
        .oauthIntrospectPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Request a OAuth token throught ROPC
     * @param {OAuthApiOauthTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauthTokenPost(
      requestParameters: OAuthApiOauthTokenPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .oauthTokenPost(requestParameters.oauthGrantParam, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for oauthTokenPost operation in OAuthApi.
 * @export
 * @interface OAuthApiOauthTokenPostRequest
 */
export interface OAuthApiOauthTokenPostRequest {
  /**
   *
   * @type {OauthGrantParam}
   * @memberof OAuthApiOauthTokenPost
   */
  readonly oauthGrantParam: OauthGrantParam;
}

/**
 * OAuthApi - object-oriented interface
 * @export
 * @class OAuthApi
 * @extends {BaseAPI}
 */
export class OAuthApi extends BaseAPI {
  /**
   *
   * @summary Introspect a OAuth token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuthApi
   */
  public oauthIntrospectPost(options?: RawAxiosRequestConfig) {
    return OAuthApiFp(this.configuration)
      .oauthIntrospectPost(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Request a OAuth token throught ROPC
   * @param {OAuthApiOauthTokenPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuthApi
   */
  public oauthTokenPost(
    requestParameters: OAuthApiOauthTokenPostRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return OAuthApiFp(this.configuration)
      .oauthTokenPost(requestParameters.oauthGrantParam, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary List Components
     * @param {Array<PublicComponentsGetLocalesEnum>} [locales]
     * @param {Array<PublicComponentsGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<PublicComponentsGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {Array<string>} [filterParticipatorySpaceIdIn]
     * @param {string} [filterParticipatorySpaceIdEq]
     * @param {Array<string>} [filterParticipatorySpaceTypeIn]
     * @param {string} [filterParticipatorySpaceTypeEq]
     * @param {string} [filterNameStart]
     * @param {string} [filterNameEq]
     * @param {string} [filterNameNotEq]
     * @param {string} [filterNameMatches]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicComponentsGet: async (
      locales?: Array<PublicComponentsGetLocalesEnum>,
      filterManifestNameNotIn?: Array<PublicComponentsGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<PublicComponentsGetFilterManifestNameInEnum>,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterParticipatorySpaceIdIn?: Array<string>,
      filterParticipatorySpaceIdEq?: string,
      filterParticipatorySpaceTypeIn?: Array<string>,
      filterParticipatorySpaceTypeEq?: string,
      filterNameStart?: string,
      filterNameEq?: string,
      filterNameNotEq?: string,
      filterNameMatches?: string,
      page?: number,
      perPage?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/public/components`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication resourceOwnerFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      if (filterManifestNameNotIn) {
        localVarQueryParameter["filter[manifest_name_not_in][]"] =
          filterManifestNameNotIn;
      }

      if (filterManifestNameIn) {
        localVarQueryParameter["filter[manifest_name_in][]"] =
          filterManifestNameIn;
      }

      if (filterManifestNameEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_eq]"] =
          filterManifestNameEq;
      }

      if (filterManifestNameNotEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_not_eq]"] =
          filterManifestNameNotEq;
      }

      if (filterParticipatorySpaceIdIn) {
        localVarQueryParameter["filter[participatory_space_id_in][]"] =
          filterParticipatorySpaceIdIn;
      }

      if (filterParticipatorySpaceIdEq !== undefined) {
        localVarQueryParameter["filter[participatory_space_id_eq]"] =
          filterParticipatorySpaceIdEq;
      }

      if (filterParticipatorySpaceTypeIn) {
        localVarQueryParameter["filter[participatory_space_type_in][]"] =
          filterParticipatorySpaceTypeIn;
      }

      if (filterParticipatorySpaceTypeEq !== undefined) {
        localVarQueryParameter["filter[participatory_space_type_eq]"] =
          filterParticipatorySpaceTypeEq;
      }

      if (filterNameStart !== undefined) {
        localVarQueryParameter["filter[name_start]"] = filterNameStart;
      }

      if (filterNameEq !== undefined) {
        localVarQueryParameter["filter[name_eq]"] = filterNameEq;
      }

      if (filterNameNotEq !== undefined) {
        localVarQueryParameter["filter[name_not_eq]"] = filterNameNotEq;
      }

      if (filterNameMatches !== undefined) {
        localVarQueryParameter["filter[name_matches]"] = filterNameMatches;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Show a Component
     * @param {number} id
     * @param {Array<PublicComponentsIdGetLocalesEnum>} [locales]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicComponentsIdGet: async (
      id: number,
      locales?: Array<PublicComponentsIdGetLocalesEnum>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("publicComponentsIdGet", "id", id);
      const localVarPath = `/public/components/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication resourceOwnerFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Show Participatory Space
     * @param {number} id
     * @param {PublicManifestNameIdGetManifestNameEnum} manifestName
     * @param {Array<PublicManifestNameIdGetLocalesEnum>} [locales]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicManifestNameIdGet: async (
      id: number,
      manifestName: PublicManifestNameIdGetManifestNameEnum,
      locales?: Array<PublicManifestNameIdGetLocalesEnum>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("publicManifestNameIdGet", "id", id);
      // verify required parameter 'manifestName' is not null or undefined
      assertParamExists(
        "publicManifestNameIdGet",
        "manifestName",
        manifestName,
      );
      const localVarPath = `/public/{manifest_name}/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(
          `{${"manifest_name"}}`,
          encodeURIComponent(String(manifestName)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication resourceOwnerFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List Participatory Spaces
     * @param {Array<PublicSpacesGetLocalesEnum>} [locales]
     * @param {Array<PublicSpacesGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<PublicSpacesGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {Array<string>} [filterTitleNotIn]
     * @param {Array<string>} [filterTitleIn]
     * @param {string} [filterTitleStart]
     * @param {string} [filterTitleNotStart]
     * @param {string} [filterTitleEq]
     * @param {string} [filterTitleNotEq]
     * @param {string} [filterTitleMatches]
     * @param {string} [filterTitleDoesNotMatch]
     * @param {PublicSpacesGetFilterTitlePresentEnum} [filterTitlePresent]
     * @param {PublicSpacesGetFilterTitleBlankEnum} [filterTitleBlank]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicSpacesGet: async (
      locales?: Array<PublicSpacesGetLocalesEnum>,
      filterManifestNameNotIn?: Array<PublicSpacesGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<PublicSpacesGetFilterManifestNameInEnum>,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterTitleNotIn?: Array<string>,
      filterTitleIn?: Array<string>,
      filterTitleStart?: string,
      filterTitleNotStart?: string,
      filterTitleEq?: string,
      filterTitleNotEq?: string,
      filterTitleMatches?: string,
      filterTitleDoesNotMatch?: string,
      filterTitlePresent?: PublicSpacesGetFilterTitlePresentEnum,
      filterTitleBlank?: PublicSpacesGetFilterTitleBlankEnum,
      page?: number,
      perPage?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/public/spaces`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication resourceOwnerFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      if (filterManifestNameNotIn) {
        localVarQueryParameter["filter[manifest_name_not_in][]"] =
          filterManifestNameNotIn;
      }

      if (filterManifestNameIn) {
        localVarQueryParameter["filter[manifest_name_in][]"] =
          filterManifestNameIn;
      }

      if (filterManifestNameEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_eq]"] =
          filterManifestNameEq;
      }

      if (filterManifestNameNotEq !== undefined) {
        localVarQueryParameter["filter[manifest_name_not_eq]"] =
          filterManifestNameNotEq;
      }

      if (filterTitleNotIn) {
        localVarQueryParameter["filter[title_not_in][]"] = filterTitleNotIn;
      }

      if (filterTitleIn) {
        localVarQueryParameter["filter[title_in][]"] = filterTitleIn;
      }

      if (filterTitleStart !== undefined) {
        localVarQueryParameter["filter[title_start]"] = filterTitleStart;
      }

      if (filterTitleNotStart !== undefined) {
        localVarQueryParameter["filter[title_not_start]"] = filterTitleNotStart;
      }

      if (filterTitleEq !== undefined) {
        localVarQueryParameter["filter[title_eq]"] = filterTitleEq;
      }

      if (filterTitleNotEq !== undefined) {
        localVarQueryParameter["filter[title_not_eq]"] = filterTitleNotEq;
      }

      if (filterTitleMatches !== undefined) {
        localVarQueryParameter["filter[title_matches]"] = filterTitleMatches;
      }

      if (filterTitleDoesNotMatch !== undefined) {
        localVarQueryParameter["filter[title_does_not_match]"] =
          filterTitleDoesNotMatch;
      }

      if (filterTitlePresent !== undefined) {
        localVarQueryParameter["filter[title_present]"] = filterTitlePresent;
      }

      if (filterTitleBlank !== undefined) {
        localVarQueryParameter["filter[title_blank]"] = filterTitleBlank;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary List Components
     * @param {Array<PublicComponentsGetLocalesEnum>} [locales]
     * @param {Array<PublicComponentsGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<PublicComponentsGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {Array<string>} [filterParticipatorySpaceIdIn]
     * @param {string} [filterParticipatorySpaceIdEq]
     * @param {Array<string>} [filterParticipatorySpaceTypeIn]
     * @param {string} [filterParticipatorySpaceTypeEq]
     * @param {string} [filterNameStart]
     * @param {string} [filterNameEq]
     * @param {string} [filterNameNotEq]
     * @param {string} [filterNameMatches]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publicComponentsGet(
      locales?: Array<PublicComponentsGetLocalesEnum>,
      filterManifestNameNotIn?: Array<PublicComponentsGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<PublicComponentsGetFilterManifestNameInEnum>,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterParticipatorySpaceIdIn?: Array<string>,
      filterParticipatorySpaceIdEq?: string,
      filterParticipatorySpaceTypeIn?: Array<string>,
      filterParticipatorySpaceTypeEq?: string,
      filterNameStart?: string,
      filterNameEq?: string,
      filterNameNotEq?: string,
      filterNameMatches?: string,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ComponentsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.publicComponentsGet(
          locales,
          filterManifestNameNotIn,
          filterManifestNameIn,
          filterManifestNameEq,
          filterManifestNameNotEq,
          filterParticipatorySpaceIdIn,
          filterParticipatorySpaceIdEq,
          filterParticipatorySpaceTypeIn,
          filterParticipatorySpaceTypeEq,
          filterNameStart,
          filterNameEq,
          filterNameNotEq,
          filterNameMatches,
          page,
          perPage,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PublicApi.publicComponentsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Show a Component
     * @param {number} id
     * @param {Array<PublicComponentsIdGetLocalesEnum>} [locales]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publicComponentsIdGet(
      id: number,
      locales?: Array<PublicComponentsIdGetLocalesEnum>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ComponentResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.publicComponentsIdGet(
          id,
          locales,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PublicApi.publicComponentsIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Show Participatory Space
     * @param {number} id
     * @param {PublicManifestNameIdGetManifestNameEnum} manifestName
     * @param {Array<PublicManifestNameIdGetLocalesEnum>} [locales]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publicManifestNameIdGet(
      id: number,
      manifestName: PublicManifestNameIdGetManifestNameEnum,
      locales?: Array<PublicManifestNameIdGetLocalesEnum>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpaceResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.publicManifestNameIdGet(
          id,
          manifestName,
          locales,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PublicApi.publicManifestNameIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary List Participatory Spaces
     * @param {Array<PublicSpacesGetLocalesEnum>} [locales]
     * @param {Array<PublicSpacesGetFilterManifestNameNotInEnum>} [filterManifestNameNotIn]
     * @param {Array<PublicSpacesGetFilterManifestNameInEnum>} [filterManifestNameIn]
     * @param {string} [filterManifestNameEq]
     * @param {string} [filterManifestNameNotEq]
     * @param {Array<string>} [filterTitleNotIn]
     * @param {Array<string>} [filterTitleIn]
     * @param {string} [filterTitleStart]
     * @param {string} [filterTitleNotStart]
     * @param {string} [filterTitleEq]
     * @param {string} [filterTitleNotEq]
     * @param {string} [filterTitleMatches]
     * @param {string} [filterTitleDoesNotMatch]
     * @param {PublicSpacesGetFilterTitlePresentEnum} [filterTitlePresent]
     * @param {PublicSpacesGetFilterTitleBlankEnum} [filterTitleBlank]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publicSpacesGet(
      locales?: Array<PublicSpacesGetLocalesEnum>,
      filterManifestNameNotIn?: Array<PublicSpacesGetFilterManifestNameNotInEnum>,
      filterManifestNameIn?: Array<PublicSpacesGetFilterManifestNameInEnum>,
      filterManifestNameEq?: string,
      filterManifestNameNotEq?: string,
      filterTitleNotIn?: Array<string>,
      filterTitleIn?: Array<string>,
      filterTitleStart?: string,
      filterTitleNotStart?: string,
      filterTitleEq?: string,
      filterTitleNotEq?: string,
      filterTitleMatches?: string,
      filterTitleDoesNotMatch?: string,
      filterTitlePresent?: PublicSpacesGetFilterTitlePresentEnum,
      filterTitleBlank?: PublicSpacesGetFilterTitleBlankEnum,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpacesResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.publicSpacesGet(
        locales,
        filterManifestNameNotIn,
        filterManifestNameIn,
        filterManifestNameEq,
        filterManifestNameNotEq,
        filterTitleNotIn,
        filterTitleIn,
        filterTitleStart,
        filterTitleNotStart,
        filterTitleEq,
        filterTitleNotEq,
        filterTitleMatches,
        filterTitleDoesNotMatch,
        filterTitlePresent,
        filterTitleBlank,
        page,
        perPage,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PublicApi.publicSpacesGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PublicApiFp(configuration);
  return {
    /**
     *
     * @summary List Components
     * @param {PublicApiPublicComponentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicComponentsGet(
      requestParameters: PublicApiPublicComponentsGetRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ComponentsResponse> {
      return localVarFp
        .publicComponentsGet(
          requestParameters.locales,
          requestParameters.filterManifestNameNotIn,
          requestParameters.filterManifestNameIn,
          requestParameters.filterManifestNameEq,
          requestParameters.filterManifestNameNotEq,
          requestParameters.filterParticipatorySpaceIdIn,
          requestParameters.filterParticipatorySpaceIdEq,
          requestParameters.filterParticipatorySpaceTypeIn,
          requestParameters.filterParticipatorySpaceTypeEq,
          requestParameters.filterNameStart,
          requestParameters.filterNameEq,
          requestParameters.filterNameNotEq,
          requestParameters.filterNameMatches,
          requestParameters.page,
          requestParameters.perPage,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Show a Component
     * @param {PublicApiPublicComponentsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicComponentsIdGet(
      requestParameters: PublicApiPublicComponentsIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ComponentResponse> {
      return localVarFp
        .publicComponentsIdGet(
          requestParameters.id,
          requestParameters.locales,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Show Participatory Space
     * @param {PublicApiPublicManifestNameIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicManifestNameIdGet(
      requestParameters: PublicApiPublicManifestNameIdGetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SpaceResponse> {
      return localVarFp
        .publicManifestNameIdGet(
          requestParameters.id,
          requestParameters.manifestName,
          requestParameters.locales,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List Participatory Spaces
     * @param {PublicApiPublicSpacesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicSpacesGet(
      requestParameters: PublicApiPublicSpacesGetRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SpacesResponse> {
      return localVarFp
        .publicSpacesGet(
          requestParameters.locales,
          requestParameters.filterManifestNameNotIn,
          requestParameters.filterManifestNameIn,
          requestParameters.filterManifestNameEq,
          requestParameters.filterManifestNameNotEq,
          requestParameters.filterTitleNotIn,
          requestParameters.filterTitleIn,
          requestParameters.filterTitleStart,
          requestParameters.filterTitleNotStart,
          requestParameters.filterTitleEq,
          requestParameters.filterTitleNotEq,
          requestParameters.filterTitleMatches,
          requestParameters.filterTitleDoesNotMatch,
          requestParameters.filterTitlePresent,
          requestParameters.filterTitleBlank,
          requestParameters.page,
          requestParameters.perPage,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for publicComponentsGet operation in PublicApi.
 * @export
 * @interface PublicApiPublicComponentsGetRequest
 */
export interface PublicApiPublicComponentsGetRequest {
  /**
   *
   * @type {Array<'en' | 'bg' | 'ar' | 'ca' | 'cs' | 'da' | 'de' | 'el' | 'eo' | 'es' | 'es-MX' | 'es-PY' | 'et' | 'eu' | 'fa' | 'fi-pl' | 'fi' | 'fr' | 'fr-CA' | 'ga' | 'gl' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'ja' | 'ko' | 'lb' | 'lt' | 'lv' | 'mt' | 'nl' | 'no' | 'pl' | 'pt' | 'pt-BR' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr' | 'sv' | 'tr' | 'uk' | 'vi' | 'zh-CN' | 'zh-TW'>}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly locales?: Array<PublicComponentsGetLocalesEnum>;

  /**
   *
   * @type {Array<'pages' | 'proposals' | 'meetings' | 'budgets' | 'surveys' | 'accountability' | 'debates' | 'sortitions' | 'blogs'>}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterManifestNameNotIn?: Array<PublicComponentsGetFilterManifestNameNotInEnum>;

  /**
   *
   * @type {Array<'pages' | 'proposals' | 'meetings' | 'budgets' | 'surveys' | 'accountability' | 'debates' | 'sortitions' | 'blogs'>}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterManifestNameIn?: Array<PublicComponentsGetFilterManifestNameInEnum>;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterManifestNameEq?: string;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterManifestNameNotEq?: string;

  /**
   *
   * @type {Array<string>}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterParticipatorySpaceIdIn?: Array<string>;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterParticipatorySpaceIdEq?: string;

  /**
   *
   * @type {Array<string>}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterParticipatorySpaceTypeIn?: Array<string>;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterParticipatorySpaceTypeEq?: string;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterNameStart?: string;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterNameEq?: string;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterNameNotEq?: string;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly filterNameMatches?: string;

  /**
   * Page number for pagination
   * @type {number}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly page?: number;

  /**
   * Number of items per page
   * @type {number}
   * @memberof PublicApiPublicComponentsGet
   */
  readonly perPage?: number;
}

/**
 * Request parameters for publicComponentsIdGet operation in PublicApi.
 * @export
 * @interface PublicApiPublicComponentsIdGetRequest
 */
export interface PublicApiPublicComponentsIdGetRequest {
  /**
   *
   * @type {number}
   * @memberof PublicApiPublicComponentsIdGet
   */
  readonly id: number;

  /**
   *
   * @type {Array<'en' | 'bg' | 'ar' | 'ca' | 'cs' | 'da' | 'de' | 'el' | 'eo' | 'es' | 'es-MX' | 'es-PY' | 'et' | 'eu' | 'fa' | 'fi-pl' | 'fi' | 'fr' | 'fr-CA' | 'ga' | 'gl' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'ja' | 'ko' | 'lb' | 'lt' | 'lv' | 'mt' | 'nl' | 'no' | 'pl' | 'pt' | 'pt-BR' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr' | 'sv' | 'tr' | 'uk' | 'vi' | 'zh-CN' | 'zh-TW'>}
   * @memberof PublicApiPublicComponentsIdGet
   */
  readonly locales?: Array<PublicComponentsIdGetLocalesEnum>;
}

/**
 * Request parameters for publicManifestNameIdGet operation in PublicApi.
 * @export
 * @interface PublicApiPublicManifestNameIdGetRequest
 */
export interface PublicApiPublicManifestNameIdGetRequest {
  /**
   *
   * @type {number}
   * @memberof PublicApiPublicManifestNameIdGet
   */
  readonly id: number;

  /**
   *
   * @type {'participatory_processes' | 'assemblies'}
   * @memberof PublicApiPublicManifestNameIdGet
   */
  readonly manifestName: PublicManifestNameIdGetManifestNameEnum;

  /**
   *
   * @type {Array<'en' | 'bg' | 'ar' | 'ca' | 'cs' | 'da' | 'de' | 'el' | 'eo' | 'es' | 'es-MX' | 'es-PY' | 'et' | 'eu' | 'fa' | 'fi-pl' | 'fi' | 'fr' | 'fr-CA' | 'ga' | 'gl' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'ja' | 'ko' | 'lb' | 'lt' | 'lv' | 'mt' | 'nl' | 'no' | 'pl' | 'pt' | 'pt-BR' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr' | 'sv' | 'tr' | 'uk' | 'vi' | 'zh-CN' | 'zh-TW'>}
   * @memberof PublicApiPublicManifestNameIdGet
   */
  readonly locales?: Array<PublicManifestNameIdGetLocalesEnum>;
}

/**
 * Request parameters for publicSpacesGet operation in PublicApi.
 * @export
 * @interface PublicApiPublicSpacesGetRequest
 */
export interface PublicApiPublicSpacesGetRequest {
  /**
   *
   * @type {Array<'en' | 'bg' | 'ar' | 'ca' | 'cs' | 'da' | 'de' | 'el' | 'eo' | 'es' | 'es-MX' | 'es-PY' | 'et' | 'eu' | 'fa' | 'fi-pl' | 'fi' | 'fr' | 'fr-CA' | 'ga' | 'gl' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'ja' | 'ko' | 'lb' | 'lt' | 'lv' | 'mt' | 'nl' | 'no' | 'pl' | 'pt' | 'pt-BR' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr' | 'sv' | 'tr' | 'uk' | 'vi' | 'zh-CN' | 'zh-TW'>}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly locales?: Array<PublicSpacesGetLocalesEnum>;

  /**
   *
   * @type {Array<'participatory_processes' | 'assemblies'>}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterManifestNameNotIn?: Array<PublicSpacesGetFilterManifestNameNotInEnum>;

  /**
   *
   * @type {Array<'participatory_processes' | 'assemblies'>}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterManifestNameIn?: Array<PublicSpacesGetFilterManifestNameInEnum>;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterManifestNameEq?: string;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterManifestNameNotEq?: string;

  /**
   *
   * @type {Array<string>}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterTitleNotIn?: Array<string>;

  /**
   *
   * @type {Array<string>}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterTitleIn?: Array<string>;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterTitleStart?: string;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterTitleNotStart?: string;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterTitleEq?: string;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterTitleNotEq?: string;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterTitleMatches?: string;

  /**
   *
   * @type {string}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterTitleDoesNotMatch?: string;

  /**
   *
   * @type {'1' | '0'}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterTitlePresent?: PublicSpacesGetFilterTitlePresentEnum;

  /**
   *
   * @type {'1' | '0'}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly filterTitleBlank?: PublicSpacesGetFilterTitleBlankEnum;

  /**
   * Page number for pagination
   * @type {number}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly page?: number;

  /**
   * Number of items per page
   * @type {number}
   * @memberof PublicApiPublicSpacesGet
   */
  readonly perPage?: number;
}

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
  /**
   *
   * @summary List Components
   * @param {PublicApiPublicComponentsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public publicComponentsGet(
    requestParameters: PublicApiPublicComponentsGetRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return PublicApiFp(this.configuration)
      .publicComponentsGet(
        requestParameters.locales,
        requestParameters.filterManifestNameNotIn,
        requestParameters.filterManifestNameIn,
        requestParameters.filterManifestNameEq,
        requestParameters.filterManifestNameNotEq,
        requestParameters.filterParticipatorySpaceIdIn,
        requestParameters.filterParticipatorySpaceIdEq,
        requestParameters.filterParticipatorySpaceTypeIn,
        requestParameters.filterParticipatorySpaceTypeEq,
        requestParameters.filterNameStart,
        requestParameters.filterNameEq,
        requestParameters.filterNameNotEq,
        requestParameters.filterNameMatches,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Show a Component
   * @param {PublicApiPublicComponentsIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public publicComponentsIdGet(
    requestParameters: PublicApiPublicComponentsIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PublicApiFp(this.configuration)
      .publicComponentsIdGet(
        requestParameters.id,
        requestParameters.locales,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Show Participatory Space
   * @param {PublicApiPublicManifestNameIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public publicManifestNameIdGet(
    requestParameters: PublicApiPublicManifestNameIdGetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PublicApiFp(this.configuration)
      .publicManifestNameIdGet(
        requestParameters.id,
        requestParameters.manifestName,
        requestParameters.locales,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List Participatory Spaces
   * @param {PublicApiPublicSpacesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicApi
   */
  public publicSpacesGet(
    requestParameters: PublicApiPublicSpacesGetRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return PublicApiFp(this.configuration)
      .publicSpacesGet(
        requestParameters.locales,
        requestParameters.filterManifestNameNotIn,
        requestParameters.filterManifestNameIn,
        requestParameters.filterManifestNameEq,
        requestParameters.filterManifestNameNotEq,
        requestParameters.filterTitleNotIn,
        requestParameters.filterTitleIn,
        requestParameters.filterTitleStart,
        requestParameters.filterTitleNotStart,
        requestParameters.filterTitleEq,
        requestParameters.filterTitleNotEq,
        requestParameters.filterTitleMatches,
        requestParameters.filterTitleDoesNotMatch,
        requestParameters.filterTitlePresent,
        requestParameters.filterTitleBlank,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const PublicComponentsGetLocalesEnum = {
  En: "en",
  Bg: "bg",
  Ar: "ar",
  Ca: "ca",
  Cs: "cs",
  Da: "da",
  De: "de",
  El: "el",
  Eo: "eo",
  Es: "es",
  EsMx: "es-MX",
  EsPy: "es-PY",
  Et: "et",
  Eu: "eu",
  Fa: "fa",
  FiPl: "fi-pl",
  Fi: "fi",
  Fr: "fr",
  FrCa: "fr-CA",
  Ga: "ga",
  Gl: "gl",
  Hr: "hr",
  Hu: "hu",
  Id: "id",
  Is: "is",
  It: "it",
  Ja: "ja",
  Ko: "ko",
  Lb: "lb",
  Lt: "lt",
  Lv: "lv",
  Mt: "mt",
  Nl: "nl",
  No: "no",
  Pl: "pl",
  Pt: "pt",
  PtBr: "pt-BR",
  Ro: "ro",
  Ru: "ru",
  Sk: "sk",
  Sl: "sl",
  Sr: "sr",
  Sv: "sv",
  Tr: "tr",
  Uk: "uk",
  Vi: "vi",
  ZhCn: "zh-CN",
  ZhTw: "zh-TW",
} as const;
export type PublicComponentsGetLocalesEnum =
  (typeof PublicComponentsGetLocalesEnum)[keyof typeof PublicComponentsGetLocalesEnum];
/**
 * @export
 */
export const PublicComponentsGetFilterManifestNameNotInEnum = {
  Pages: "pages",
  Proposals: "proposals",
  Meetings: "meetings",
  Budgets: "budgets",
  Surveys: "surveys",
  Accountability: "accountability",
  Debates: "debates",
  Sortitions: "sortitions",
  Blogs: "blogs",
} as const;
export type PublicComponentsGetFilterManifestNameNotInEnum =
  (typeof PublicComponentsGetFilterManifestNameNotInEnum)[keyof typeof PublicComponentsGetFilterManifestNameNotInEnum];
/**
 * @export
 */
export const PublicComponentsGetFilterManifestNameInEnum = {
  Pages: "pages",
  Proposals: "proposals",
  Meetings: "meetings",
  Budgets: "budgets",
  Surveys: "surveys",
  Accountability: "accountability",
  Debates: "debates",
  Sortitions: "sortitions",
  Blogs: "blogs",
} as const;
export type PublicComponentsGetFilterManifestNameInEnum =
  (typeof PublicComponentsGetFilterManifestNameInEnum)[keyof typeof PublicComponentsGetFilterManifestNameInEnum];
/**
 * @export
 */
export const PublicComponentsIdGetLocalesEnum = {
  En: "en",
  Bg: "bg",
  Ar: "ar",
  Ca: "ca",
  Cs: "cs",
  Da: "da",
  De: "de",
  El: "el",
  Eo: "eo",
  Es: "es",
  EsMx: "es-MX",
  EsPy: "es-PY",
  Et: "et",
  Eu: "eu",
  Fa: "fa",
  FiPl: "fi-pl",
  Fi: "fi",
  Fr: "fr",
  FrCa: "fr-CA",
  Ga: "ga",
  Gl: "gl",
  Hr: "hr",
  Hu: "hu",
  Id: "id",
  Is: "is",
  It: "it",
  Ja: "ja",
  Ko: "ko",
  Lb: "lb",
  Lt: "lt",
  Lv: "lv",
  Mt: "mt",
  Nl: "nl",
  No: "no",
  Pl: "pl",
  Pt: "pt",
  PtBr: "pt-BR",
  Ro: "ro",
  Ru: "ru",
  Sk: "sk",
  Sl: "sl",
  Sr: "sr",
  Sv: "sv",
  Tr: "tr",
  Uk: "uk",
  Vi: "vi",
  ZhCn: "zh-CN",
  ZhTw: "zh-TW",
} as const;
export type PublicComponentsIdGetLocalesEnum =
  (typeof PublicComponentsIdGetLocalesEnum)[keyof typeof PublicComponentsIdGetLocalesEnum];
/**
 * @export
 */
export const PublicManifestNameIdGetManifestNameEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;
export type PublicManifestNameIdGetManifestNameEnum =
  (typeof PublicManifestNameIdGetManifestNameEnum)[keyof typeof PublicManifestNameIdGetManifestNameEnum];
/**
 * @export
 */
export const PublicManifestNameIdGetLocalesEnum = {
  En: "en",
  Bg: "bg",
  Ar: "ar",
  Ca: "ca",
  Cs: "cs",
  Da: "da",
  De: "de",
  El: "el",
  Eo: "eo",
  Es: "es",
  EsMx: "es-MX",
  EsPy: "es-PY",
  Et: "et",
  Eu: "eu",
  Fa: "fa",
  FiPl: "fi-pl",
  Fi: "fi",
  Fr: "fr",
  FrCa: "fr-CA",
  Ga: "ga",
  Gl: "gl",
  Hr: "hr",
  Hu: "hu",
  Id: "id",
  Is: "is",
  It: "it",
  Ja: "ja",
  Ko: "ko",
  Lb: "lb",
  Lt: "lt",
  Lv: "lv",
  Mt: "mt",
  Nl: "nl",
  No: "no",
  Pl: "pl",
  Pt: "pt",
  PtBr: "pt-BR",
  Ro: "ro",
  Ru: "ru",
  Sk: "sk",
  Sl: "sl",
  Sr: "sr",
  Sv: "sv",
  Tr: "tr",
  Uk: "uk",
  Vi: "vi",
  ZhCn: "zh-CN",
  ZhTw: "zh-TW",
} as const;
export type PublicManifestNameIdGetLocalesEnum =
  (typeof PublicManifestNameIdGetLocalesEnum)[keyof typeof PublicManifestNameIdGetLocalesEnum];
/**
 * @export
 */
export const PublicSpacesGetLocalesEnum = {
  En: "en",
  Bg: "bg",
  Ar: "ar",
  Ca: "ca",
  Cs: "cs",
  Da: "da",
  De: "de",
  El: "el",
  Eo: "eo",
  Es: "es",
  EsMx: "es-MX",
  EsPy: "es-PY",
  Et: "et",
  Eu: "eu",
  Fa: "fa",
  FiPl: "fi-pl",
  Fi: "fi",
  Fr: "fr",
  FrCa: "fr-CA",
  Ga: "ga",
  Gl: "gl",
  Hr: "hr",
  Hu: "hu",
  Id: "id",
  Is: "is",
  It: "it",
  Ja: "ja",
  Ko: "ko",
  Lb: "lb",
  Lt: "lt",
  Lv: "lv",
  Mt: "mt",
  Nl: "nl",
  No: "no",
  Pl: "pl",
  Pt: "pt",
  PtBr: "pt-BR",
  Ro: "ro",
  Ru: "ru",
  Sk: "sk",
  Sl: "sl",
  Sr: "sr",
  Sv: "sv",
  Tr: "tr",
  Uk: "uk",
  Vi: "vi",
  ZhCn: "zh-CN",
  ZhTw: "zh-TW",
} as const;
export type PublicSpacesGetLocalesEnum =
  (typeof PublicSpacesGetLocalesEnum)[keyof typeof PublicSpacesGetLocalesEnum];
/**
 * @export
 */
export const PublicSpacesGetFilterManifestNameNotInEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;
export type PublicSpacesGetFilterManifestNameNotInEnum =
  (typeof PublicSpacesGetFilterManifestNameNotInEnum)[keyof typeof PublicSpacesGetFilterManifestNameNotInEnum];
/**
 * @export
 */
export const PublicSpacesGetFilterManifestNameInEnum = {
  ParticipatoryProcesses: "participatory_processes",
  Assemblies: "assemblies",
} as const;
export type PublicSpacesGetFilterManifestNameInEnum =
  (typeof PublicSpacesGetFilterManifestNameInEnum)[keyof typeof PublicSpacesGetFilterManifestNameInEnum];
/**
 * @export
 */
export const PublicSpacesGetFilterTitlePresentEnum = {
  _1: "1",
  _0: "0",
} as const;
export type PublicSpacesGetFilterTitlePresentEnum =
  (typeof PublicSpacesGetFilterTitlePresentEnum)[keyof typeof PublicSpacesGetFilterTitlePresentEnum];
/**
 * @export
 */
export const PublicSpacesGetFilterTitleBlankEnum = {
  _1: "1",
  _0: "0",
} as const;
export type PublicSpacesGetFilterTitleBlankEnum =
  (typeof PublicSpacesGetFilterTitleBlankEnum)[keyof typeof PublicSpacesGetFilterTitleBlankEnum];

/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary List available organizations
     * @param {Array<SystemOrganizationsGetLocalesEnum>} [locales]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemOrganizationsGet: async (
      locales?: Array<SystemOrganizationsGetLocalesEnum>,
      page?: number,
      perPage?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/system/organizations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (locales) {
        localVarQueryParameter["locales[]"] = locales;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List available Users
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [filterNicknameNotIn]
     * @param {Array<string>} [filterNicknameIn]
     * @param {string} [filterNicknameStart]
     * @param {string} [filterNicknameNotStart]
     * @param {string} [filterNicknameEq]
     * @param {string} [filterNicknameNotEq]
     * @param {string} [filterNicknameMatches]
     * @param {string} [filterNicknameDoesNotMatch]
     * @param {SystemUsersGetFilterNicknamePresentEnum} [filterNicknamePresent]
     * @param {SystemUsersGetFilterNicknameBlankEnum} [filterNicknameBlank]
     * @param {string} [filterExtraCont] Search on user extended_data. use the format: &#x60;\&quot;&lt;key&gt;\&quot;:&lt;space&gt;\&quot;&lt;value&gt;\&quot;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersGet: async (
      page?: number,
      perPage?: number,
      filterNicknameNotIn?: Array<string>,
      filterNicknameIn?: Array<string>,
      filterNicknameStart?: string,
      filterNicknameNotStart?: string,
      filterNicknameEq?: string,
      filterNicknameNotEq?: string,
      filterNicknameMatches?: string,
      filterNicknameDoesNotMatch?: string,
      filterNicknamePresent?: SystemUsersGetFilterNicknamePresentEnum,
      filterNicknameBlank?: SystemUsersGetFilterNicknameBlankEnum,
      filterExtraCont?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/system/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication credentialFlowBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      if (filterNicknameNotIn) {
        localVarQueryParameter["filter[nickname_not_in][]"] =
          filterNicknameNotIn;
      }

      if (filterNicknameIn) {
        localVarQueryParameter["filter[nickname_in][]"] = filterNicknameIn;
      }

      if (filterNicknameStart !== undefined) {
        localVarQueryParameter["filter[nickname_start]"] = filterNicknameStart;
      }

      if (filterNicknameNotStart !== undefined) {
        localVarQueryParameter["filter[nickname_not_start]"] =
          filterNicknameNotStart;
      }

      if (filterNicknameEq !== undefined) {
        localVarQueryParameter["filter[nickname_eq]"] = filterNicknameEq;
      }

      if (filterNicknameNotEq !== undefined) {
        localVarQueryParameter["filter[nickname_not_eq]"] = filterNicknameNotEq;
      }

      if (filterNicknameMatches !== undefined) {
        localVarQueryParameter["filter[nickname_matches]"] =
          filterNicknameMatches;
      }

      if (filterNicknameDoesNotMatch !== undefined) {
        localVarQueryParameter["filter[nickname_does_not_match]"] =
          filterNicknameDoesNotMatch;
      }

      if (filterNicknamePresent !== undefined) {
        localVarQueryParameter["filter[nickname_present]"] =
          filterNicknamePresent;
      }

      if (filterNicknameBlank !== undefined) {
        localVarQueryParameter["filter[nickname_blank]"] = filterNicknameBlank;
      }

      if (filterExtraCont !== undefined) {
        localVarQueryParameter["filter[extra_cont]"] = filterExtraCont;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary List available organizations
     * @param {Array<SystemOrganizationsGetLocalesEnum>} [locales]
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async systemOrganizationsGet(
      locales?: Array<SystemOrganizationsGetLocalesEnum>,
      page?: number,
      perPage?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<OrganizationsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.systemOrganizationsGet(
          locales,
          page,
          perPage,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SystemApi.systemOrganizationsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary List available Users
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {Array<string>} [filterNicknameNotIn]
     * @param {Array<string>} [filterNicknameIn]
     * @param {string} [filterNicknameStart]
     * @param {string} [filterNicknameNotStart]
     * @param {string} [filterNicknameEq]
     * @param {string} [filterNicknameNotEq]
     * @param {string} [filterNicknameMatches]
     * @param {string} [filterNicknameDoesNotMatch]
     * @param {SystemUsersGetFilterNicknamePresentEnum} [filterNicknamePresent]
     * @param {SystemUsersGetFilterNicknameBlankEnum} [filterNicknameBlank]
     * @param {string} [filterExtraCont] Search on user extended_data. use the format: &#x60;\&quot;&lt;key&gt;\&quot;:&lt;space&gt;\&quot;&lt;value&gt;\&quot;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async systemUsersGet(
      page?: number,
      perPage?: number,
      filterNicknameNotIn?: Array<string>,
      filterNicknameIn?: Array<string>,
      filterNicknameStart?: string,
      filterNicknameNotStart?: string,
      filterNicknameEq?: string,
      filterNicknameNotEq?: string,
      filterNicknameMatches?: string,
      filterNicknameDoesNotMatch?: string,
      filterNicknamePresent?: SystemUsersGetFilterNicknamePresentEnum,
      filterNicknameBlank?: SystemUsersGetFilterNicknameBlankEnum,
      filterExtraCont?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.systemUsersGet(
        page,
        perPage,
        filterNicknameNotIn,
        filterNicknameIn,
        filterNicknameStart,
        filterNicknameNotStart,
        filterNicknameEq,
        filterNicknameNotEq,
        filterNicknameMatches,
        filterNicknameDoesNotMatch,
        filterNicknamePresent,
        filterNicknameBlank,
        filterExtraCont,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SystemApi.systemUsersGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SystemApiFp(configuration);
  return {
    /**
     *
     * @summary List available organizations
     * @param {SystemApiSystemOrganizationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemOrganizationsGet(
      requestParameters: SystemApiSystemOrganizationsGetRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationsResponse> {
      return localVarFp
        .systemOrganizationsGet(
          requestParameters.locales,
          requestParameters.page,
          requestParameters.perPage,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List available Users
     * @param {SystemApiSystemUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersGet(
      requestParameters: SystemApiSystemUsersGetRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UsersResponse> {
      return localVarFp
        .systemUsersGet(
          requestParameters.page,
          requestParameters.perPage,
          requestParameters.filterNicknameNotIn,
          requestParameters.filterNicknameIn,
          requestParameters.filterNicknameStart,
          requestParameters.filterNicknameNotStart,
          requestParameters.filterNicknameEq,
          requestParameters.filterNicknameNotEq,
          requestParameters.filterNicknameMatches,
          requestParameters.filterNicknameDoesNotMatch,
          requestParameters.filterNicknamePresent,
          requestParameters.filterNicknameBlank,
          requestParameters.filterExtraCont,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for systemOrganizationsGet operation in SystemApi.
 * @export
 * @interface SystemApiSystemOrganizationsGetRequest
 */
export interface SystemApiSystemOrganizationsGetRequest {
  /**
   *
   * @type {Array<'en' | 'bg' | 'ar' | 'ca' | 'cs' | 'da' | 'de' | 'el' | 'eo' | 'es' | 'es-MX' | 'es-PY' | 'et' | 'eu' | 'fa' | 'fi-pl' | 'fi' | 'fr' | 'fr-CA' | 'ga' | 'gl' | 'hr' | 'hu' | 'id' | 'is' | 'it' | 'ja' | 'ko' | 'lb' | 'lt' | 'lv' | 'mt' | 'nl' | 'no' | 'pl' | 'pt' | 'pt-BR' | 'ro' | 'ru' | 'sk' | 'sl' | 'sr' | 'sv' | 'tr' | 'uk' | 'vi' | 'zh-CN' | 'zh-TW'>}
   * @memberof SystemApiSystemOrganizationsGet
   */
  readonly locales?: Array<SystemOrganizationsGetLocalesEnum>;

  /**
   * Page number for pagination
   * @type {number}
   * @memberof SystemApiSystemOrganizationsGet
   */
  readonly page?: number;

  /**
   * Number of items per page
   * @type {number}
   * @memberof SystemApiSystemOrganizationsGet
   */
  readonly perPage?: number;
}

/**
 * Request parameters for systemUsersGet operation in SystemApi.
 * @export
 * @interface SystemApiSystemUsersGetRequest
 */
export interface SystemApiSystemUsersGetRequest {
  /**
   * Page number for pagination
   * @type {number}
   * @memberof SystemApiSystemUsersGet
   */
  readonly page?: number;

  /**
   * Number of items per page
   * @type {number}
   * @memberof SystemApiSystemUsersGet
   */
  readonly perPage?: number;

  /**
   *
   * @type {Array<string>}
   * @memberof SystemApiSystemUsersGet
   */
  readonly filterNicknameNotIn?: Array<string>;

  /**
   *
   * @type {Array<string>}
   * @memberof SystemApiSystemUsersGet
   */
  readonly filterNicknameIn?: Array<string>;

  /**
   *
   * @type {string}
   * @memberof SystemApiSystemUsersGet
   */
  readonly filterNicknameStart?: string;

  /**
   *
   * @type {string}
   * @memberof SystemApiSystemUsersGet
   */
  readonly filterNicknameNotStart?: string;

  /**
   *
   * @type {string}
   * @memberof SystemApiSystemUsersGet
   */
  readonly filterNicknameEq?: string;

  /**
   *
   * @type {string}
   * @memberof SystemApiSystemUsersGet
   */
  readonly filterNicknameNotEq?: string;

  /**
   *
   * @type {string}
   * @memberof SystemApiSystemUsersGet
   */
  readonly filterNicknameMatches?: string;

  /**
   *
   * @type {string}
   * @memberof SystemApiSystemUsersGet
   */
  readonly filterNicknameDoesNotMatch?: string;

  /**
   *
   * @type {'1' | '0'}
   * @memberof SystemApiSystemUsersGet
   */
  readonly filterNicknamePresent?: SystemUsersGetFilterNicknamePresentEnum;

  /**
   *
   * @type {'1' | '0'}
   * @memberof SystemApiSystemUsersGet
   */
  readonly filterNicknameBlank?: SystemUsersGetFilterNicknameBlankEnum;

  /**
   * Search on user extended_data. use the format: &#x60;\&quot;&lt;key&gt;\&quot;:&lt;space&gt;\&quot;&lt;value&gt;\&quot;&#x60;
   * @type {string}
   * @memberof SystemApiSystemUsersGet
   */
  readonly filterExtraCont?: string;
}

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
  /**
   *
   * @summary List available organizations
   * @param {SystemApiSystemOrganizationsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public systemOrganizationsGet(
    requestParameters: SystemApiSystemOrganizationsGetRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return SystemApiFp(this.configuration)
      .systemOrganizationsGet(
        requestParameters.locales,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List available Users
   * @param {SystemApiSystemUsersGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public systemUsersGet(
    requestParameters: SystemApiSystemUsersGetRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return SystemApiFp(this.configuration)
      .systemUsersGet(
        requestParameters.page,
        requestParameters.perPage,
        requestParameters.filterNicknameNotIn,
        requestParameters.filterNicknameIn,
        requestParameters.filterNicknameStart,
        requestParameters.filterNicknameNotStart,
        requestParameters.filterNicknameEq,
        requestParameters.filterNicknameNotEq,
        requestParameters.filterNicknameMatches,
        requestParameters.filterNicknameDoesNotMatch,
        requestParameters.filterNicknamePresent,
        requestParameters.filterNicknameBlank,
        requestParameters.filterExtraCont,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const SystemOrganizationsGetLocalesEnum = {
  En: "en",
  Bg: "bg",
  Ar: "ar",
  Ca: "ca",
  Cs: "cs",
  Da: "da",
  De: "de",
  El: "el",
  Eo: "eo",
  Es: "es",
  EsMx: "es-MX",
  EsPy: "es-PY",
  Et: "et",
  Eu: "eu",
  Fa: "fa",
  FiPl: "fi-pl",
  Fi: "fi",
  Fr: "fr",
  FrCa: "fr-CA",
  Ga: "ga",
  Gl: "gl",
  Hr: "hr",
  Hu: "hu",
  Id: "id",
  Is: "is",
  It: "it",
  Ja: "ja",
  Ko: "ko",
  Lb: "lb",
  Lt: "lt",
  Lv: "lv",
  Mt: "mt",
  Nl: "nl",
  No: "no",
  Pl: "pl",
  Pt: "pt",
  PtBr: "pt-BR",
  Ro: "ro",
  Ru: "ru",
  Sk: "sk",
  Sl: "sl",
  Sr: "sr",
  Sv: "sv",
  Tr: "tr",
  Uk: "uk",
  Vi: "vi",
  ZhCn: "zh-CN",
  ZhTw: "zh-TW",
} as const;
export type SystemOrganizationsGetLocalesEnum =
  (typeof SystemOrganizationsGetLocalesEnum)[keyof typeof SystemOrganizationsGetLocalesEnum];
/**
 * @export
 */
export const SystemUsersGetFilterNicknamePresentEnum = {
  _1: "1",
  _0: "0",
} as const;
export type SystemUsersGetFilterNicknamePresentEnum =
  (typeof SystemUsersGetFilterNicknamePresentEnum)[keyof typeof SystemUsersGetFilterNicknamePresentEnum];
/**
 * @export
 */
export const SystemUsersGetFilterNicknameBlankEnum = {
  _1: "1",
  _0: "0",
} as const;
export type SystemUsersGetFilterNicknameBlankEnum =
  (typeof SystemUsersGetFilterNicknameBlankEnum)[keyof typeof SystemUsersGetFilterNicknameBlankEnum];
