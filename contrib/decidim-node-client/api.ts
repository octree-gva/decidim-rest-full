/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * A RestFull API for Decidim, to be able to CRUD resources from Decidim.  ## Authentication [Get a token](Decidim::RestFull.docs_url/category/authentication) from our `/oauth/token` routes,  following OAuth specs on Credential Flows or Resource Owner Password Credentials Flow.  ### Permissions A permission system is attached to the created OAuth application, that is designed in two levels:   - **scope**: a broad permission to access a collection of endpoints - **abilities**: a fine grained permission system that allow actions.   The scopes and abilities are manageable in your System Admin Panel.  ### Multi-tenant Decidim is multi-tenant, and this API supports it. - The **`system` scope** endpoints are available in any tenant - The tenant `host` attribute will be used to guess which tenant you are requesting.    For example, given a tenant `example.org` and `foobar.org`, the endpoint   * `example.org/oauth/token` will ask a token for the example.org organization   * `foobar.org/oauth/token` for foobar.org. 
 *
 * The version of the OpenAPI document: v0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ClientCredential
 */
export interface ClientCredential {
    /**
     * Client Credential Flow, for **machine-to-machine**
     * @type {string}
     * @memberof ClientCredential
     */
    'grant_type': ClientCredentialGrantTypeEnum;
    /**
     * OAuth application Client Id
     * @type {string}
     * @memberof ClientCredential
     */
    'client_id': string;
    /**
     * OAuth application Client Secret
     * @type {string}
     * @memberof ClientCredential
     */
    'client_secret': string;
    /**
     * Requested scopes
     * @type {string}
     * @memberof ClientCredential
     */
    'scope': ClientCredentialScopeEnum;
}

export const ClientCredentialGrantTypeEnum = {
    ClientCredentials: 'client_credentials'
} as const;

export type ClientCredentialGrantTypeEnum = typeof ClientCredentialGrantTypeEnum[keyof typeof ClientCredentialGrantTypeEnum];
export const ClientCredentialScopeEnum = {
    Public: 'public',
    Spaces: 'spaces',
    System: 'system',
    Proposals: 'proposals',
    Meetings: 'meetings',
    Debates: 'debates',
    Pages: 'pages'
} as const;

export type ClientCredentialScopeEnum = typeof ClientCredentialScopeEnum[keyof typeof ClientCredentialScopeEnum];

/**
 * 
 * @export
 * @interface Impersonation
 */
export interface Impersonation {
    /**
     * Resource Owner Password Credentials (ROPC) Flow, for **user impersonation**
     * @type {string}
     * @memberof Impersonation
     */
    'grant_type': ImpersonationGrantTypeEnum;
    /**
     * Type of ROPC
     * @type {string}
     * @memberof Impersonation
     */
    'auth_type': ImpersonationAuthTypeEnum;
    /**
     * User nickname
     * @type {string}
     * @memberof Impersonation
     */
    'username': string;
    /**
     * OAuth application Client Id
     * @type {string}
     * @memberof Impersonation
     */
    'client_id': string;
    /**
     * OAuth application Client Secret
     * @type {string}
     * @memberof Impersonation
     */
    'client_secret': string;
    /**
     * Request scopes
     * @type {string}
     * @memberof Impersonation
     */
    'scope': ImpersonationScopeEnum;
}

export const ImpersonationGrantTypeEnum = {
    Password: 'password'
} as const;

export type ImpersonationGrantTypeEnum = typeof ImpersonationGrantTypeEnum[keyof typeof ImpersonationGrantTypeEnum];
export const ImpersonationAuthTypeEnum = {
    Impersonate: 'impersonate'
} as const;

export type ImpersonationAuthTypeEnum = typeof ImpersonationAuthTypeEnum[keyof typeof ImpersonationAuthTypeEnum];
export const ImpersonationScopeEnum = {
    Public: 'public',
    Spaces: 'spaces',
    Proposals: 'proposals',
    Meetings: 'meetings',
    Debates: 'debates',
    Pages: 'pages'
} as const;

export type ImpersonationScopeEnum = typeof ImpersonationScopeEnum[keyof typeof ImpersonationScopeEnum];

/**
 * 
 * @export
 * @interface Login
 */
export interface Login {
    /**
     * Resource Owner Password Credentials (ROPC) Flow, for **user login**
     * @type {string}
     * @memberof Login
     */
    'grant_type': LoginGrantTypeEnum;
    /**
     * Type of ROPC
     * @type {string}
     * @memberof Login
     */
    'auth_type': LoginAuthTypeEnum;
    /**
     * User nickname
     * @type {string}
     * @memberof Login
     */
    'username': string;
    /**
     * User password
     * @type {string}
     * @memberof Login
     */
    'password': string;
    /**
     * OAuth application Client Id
     * @type {string}
     * @memberof Login
     */
    'client_id': string;
    /**
     * OAuth application Client Secret
     * @type {string}
     * @memberof Login
     */
    'client_secret': string;
    /**
     * Request scopes
     * @type {string}
     * @memberof Login
     */
    'scope': LoginScopeEnum;
}

export const LoginGrantTypeEnum = {
    Password: 'password'
} as const;

export type LoginGrantTypeEnum = typeof LoginGrantTypeEnum[keyof typeof LoginGrantTypeEnum];
export const LoginAuthTypeEnum = {
    Login: 'login'
} as const;

export type LoginAuthTypeEnum = typeof LoginAuthTypeEnum[keyof typeof LoginAuthTypeEnum];
export const LoginScopeEnum = {
    Public: 'public',
    Spaces: 'spaces',
    Proposals: 'proposals',
    Meetings: 'meetings',
    Debates: 'debates',
    Pages: 'pages'
} as const;

export type LoginScopeEnum = typeof LoginScopeEnum[keyof typeof LoginScopeEnum];

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'error_code': number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'details'?: string;
}
/**
 * @type OauthGrantParam
 * @export
 */
export type OauthGrantParam = ClientCredential | Impersonation | Login;

/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'type'?: string;
    /**
     * 
     * @type {OrganizationAttributes}
     * @memberof Organization
     */
    'attributes'?: OrganizationAttributes;
}
/**
 * 
 * @export
 * @interface OrganizationAttributes
 */
export interface OrganizationAttributes {
    /**
     * 
     * @type {number}
     * @memberof OrganizationAttributes
     */
    'id': number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof OrganizationAttributes
     */
    'name'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof OrganizationAttributes
     */
    'host'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrganizationAttributes
     */
    'secondaryHosts'?: Array<string>;
    /**
     * 
     * @type {OrganizationAttributesMeta}
     * @memberof OrganizationAttributes
     */
    'meta'?: OrganizationAttributesMeta;
    /**
     * 
     * @type {string}
     * @memberof OrganizationAttributes
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationAttributes
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface OrganizationAttributesMeta
 */
export interface OrganizationAttributesMeta {
    /**
     * 
     * @type {Array<string>}
     * @memberof OrganizationAttributesMeta
     */
    'populated'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrganizationAttributesMeta
     */
    'locales'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OrganizationsResponse
 */
export interface OrganizationsResponse {
    /**
     * 
     * @type {Array<Organization>}
     * @memberof OrganizationsResponse
     */
    'data': Array<Organization>;
}
/**
 * @type PasswordGrantParam
 * @export
 */
export type PasswordGrantParam = Impersonation | Login;


/**
 * OAuthApi - axios parameter creator
 * @export
 */
export const OAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Request a OAuth token
         * @param {OauthGrantParam} oauthGrantParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthTokenPost: async (oauthGrantParam: OauthGrantParam, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oauthGrantParam' is not null or undefined
            assertParamExists('oauthTokenPost', 'oauthGrantParam', oauthGrantParam)
            const localVarPath = `/oauth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oauthGrantParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OAuthApi - functional programming interface
 * @export
 */
export const OAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Request a OAuth token
         * @param {OauthGrantParam} oauthGrantParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthTokenPost(oauthGrantParam: OauthGrantParam, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthTokenPost(oauthGrantParam, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OAuthApi.oauthTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OAuthApi - factory interface
 * @export
 */
export const OAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OAuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Request a OAuth token
         * @param {OauthGrantParam} oauthGrantParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthTokenPost(oauthGrantParam: OauthGrantParam, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.oauthTokenPost(oauthGrantParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OAuthApi - object-oriented interface
 * @export
 * @class OAuthApi
 * @extends {BaseAPI}
 */
export class OAuthApi extends BaseAPI {
    /**
     * 
     * @summary Request a OAuth token
     * @param {OauthGrantParam} oauthGrantParam 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public oauthTokenPost(oauthGrantParam: OauthGrantParam, options?: RawAxiosRequestConfig) {
        return OAuthApiFp(this.configuration).oauthTokenPost(oauthGrantParam, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List available organizations
         * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate] 
         * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales] 
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRestFullV00SystemOrganizationsGet: async (populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>, locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest_full/v0.0/system/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication credentialFlowBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (populate) {
                localVarQueryParameter['populate[]'] = populate;
            }

            if (locales) {
                localVarQueryParameter['locales[]'] = locales;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List available organizations
         * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate] 
         * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales] 
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRestFullV00SystemOrganizationsGet(populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>, locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRestFullV00SystemOrganizationsGet(populate, locales, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.apiRestFullV00SystemOrganizationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * 
         * @summary List available organizations
         * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate] 
         * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales] 
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRestFullV00SystemOrganizationsGet(populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>, locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>, page?: number, perPage?: number, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationsResponse> {
            return localVarFp.apiRestFullV00SystemOrganizationsGet(populate, locales, page, perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * 
     * @summary List available organizations
     * @param {Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>} [populate] 
     * @param {Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>} [locales] 
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public apiRestFullV00SystemOrganizationsGet(populate?: Array<ApiRestFullV00SystemOrganizationsGetPopulateEnum>, locales?: Array<ApiRestFullV00SystemOrganizationsGetLocalesEnum>, page?: number, perPage?: number, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).apiRestFullV00SystemOrganizationsGet(populate, locales, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ApiRestFullV00SystemOrganizationsGetPopulateEnum = {
    Id: 'id',
    Host: 'host',
    SecondaryHosts: 'secondary_hosts',
    Name: 'name',
    CreatedAt: 'created_at',
    UpdatedAt: 'updated_at'
} as const;
export type ApiRestFullV00SystemOrganizationsGetPopulateEnum = typeof ApiRestFullV00SystemOrganizationsGetPopulateEnum[keyof typeof ApiRestFullV00SystemOrganizationsGetPopulateEnum];
/**
 * @export
 */
export const ApiRestFullV00SystemOrganizationsGetLocalesEnum = {
    En: 'en',
    Fr: 'fr'
} as const;
export type ApiRestFullV00SystemOrganizationsGetLocalesEnum = typeof ApiRestFullV00SystemOrganizationsGetLocalesEnum[keyof typeof ApiRestFullV00SystemOrganizationsGetLocalesEnum];


